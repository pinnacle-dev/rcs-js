/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "./core/headers.js";
import * as Pinnacle from "./api/index.js";
import * as errors from "./errors/index.js";
import { Company } from "./api/resources/company/client/Client.js";
import { Send } from "./api/resources/send/client/Client.js";
import { Tools } from "./api/resources/tools/client/Client.js";

export declare namespace PinnacleClient {
    export interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PinnacleClient {
    protected readonly _options: PinnacleClient.Options;
    protected _company: Company | undefined;
    protected _send: Send | undefined;
    protected _tools: Tools | undefined;

    constructor(_options: PinnacleClient.Options) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "rcs-js",
                    "X-Fern-SDK-Version": "1.0.22",
                    "User-Agent": "rcs-js/1.0.22",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get company(): Company {
        return (this._company ??= new Company(this._options));
    }

    public get send(): Send {
        return (this._send ??= new Send(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    /**
     * Retrieve the RCS functionality of a phone number. For example checks if a phone number can receive RCS message and if it can receive RCS carousels.
     *
     * @param {Pinnacle.GetRcsFunctionalityRequest} request
     * @param {PinnacleClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.getRcsFunctionality()
     */
    public getRcsFunctionality(
        request: Pinnacle.GetRcsFunctionalityRequest = {},
        requestOptions?: PinnacleClient.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.RcsFunctionalities> {
        return core.HttpResponsePromise.fromPromise(this.__getRcsFunctionality(request, requestOptions));
    }

    private async __getRcsFunctionality(
        request: Pinnacle.GetRcsFunctionalityRequest = {},
        requestOptions?: PinnacleClient.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.RcsFunctionalities>> {
        const { phoneNumber } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (phoneNumber != null) {
            _queryParams["phoneNumber"] = phoneNumber;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                "rcs_functionality",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.RcsFunctionalities, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Pinnacle.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError("Timeout exceeded when calling GET /rcs_functionality.");
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "PINNACLE-API-Key": apiKeyValue };
    }
}
