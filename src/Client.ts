/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Brands } from "./api/resources/brands/client/Client.js";
import { Contacts } from "./api/resources/contacts/client/Client.js";
import { Conversations } from "./api/resources/conversations/client/Client.js";
import { Messages } from "./api/resources/messages/client/Client.js";
import { PhoneNumbers } from "./api/resources/phoneNumbers/client/Client.js";
import { Rcs } from "./api/resources/rcs/client/Client.js";
import { Webhooks } from "./api/resources/webhooks/client/Client.js";
import { Campaigns } from "./api/resources/campaigns/client/Client.js";
import { Status } from "./api/resources/status/client/Client.js";
import { Tools } from "./api/resources/tools/client/Client.js";

export declare namespace PinnacleClient {
    export interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class PinnacleClient {
    protected readonly _options: PinnacleClient.Options;
    protected _brands: Brands | undefined;
    protected _contacts: Contacts | undefined;
    protected _conversations: Conversations | undefined;
    protected _messages: Messages | undefined;
    protected _phoneNumbers: PhoneNumbers | undefined;
    protected _rcs: Rcs | undefined;
    protected _webhooks: Webhooks | undefined;
    protected _campaigns: Campaigns | undefined;
    protected _status: Status | undefined;
    protected _tools: Tools | undefined;

    constructor(_options: PinnacleClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "rcs-js",
                    "X-Fern-SDK-Version": "2.0.1",
                    "User-Agent": "rcs-js/2.0.1",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get brands(): Brands {
        return (this._brands ??= new Brands(this._options));
    }

    public get contacts(): Contacts {
        return (this._contacts ??= new Contacts(this._options));
    }

    public get conversations(): Conversations {
        return (this._conversations ??= new Conversations(this._options));
    }

    public get messages(): Messages {
        return (this._messages ??= new Messages(this._options));
    }

    public get phoneNumbers(): PhoneNumbers {
        return (this._phoneNumbers ??= new PhoneNumbers(this._options));
    }

    public get rcs(): Rcs {
        return (this._rcs ??= new Rcs(this._options));
    }

    public get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this._options));
    }

    public get campaigns(): Campaigns {
        return (this._campaigns ??= new Campaigns(this._options));
    }

    public get status(): Status {
        return (this._status ??= new Status(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }
}
