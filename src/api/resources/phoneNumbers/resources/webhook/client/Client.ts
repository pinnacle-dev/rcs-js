/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Pinnacle from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Webhook {
    export interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class Webhook {
    protected readonly _options: Webhook.Options;

    constructor(_options: Webhook.Options = {}) {
        this._options = _options;
    }

    /**
     * Connect a webhook to your phone number to receive real-time notifications for incoming messages, delivery status updates, and other communication events.
     *
     * @param {string} phone - The phone number you want to attach the webhook to in E.164 format. Make sure it is url encoded (i.e. replace the leading + with %2B). <br>
     *
     *                         Must be a phone number that you own and have already [purchased](./buy) through the API. A phone number can have multiple webhooks attached to it.
     * @param {Pinnacle.AttachWebhookParams} request
     * @param {Webhook.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.NotFoundError}
     * @throws {@link Pinnacle.InternalServerError}
     * @throws {@link Pinnacle.NotImplementedError}
     *
     * @example
     *     await client.phoneNumbers.webhook.attach("%2B14155551234", {
     *         webhookId: 1
     *     })
     */
    public attach(
        phone: string,
        request: Pinnacle.AttachWebhookParams,
        requestOptions?: Webhook.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.ConfiguredWebhook> {
        return core.HttpResponsePromise.fromPromise(this.__attach(phone, request, requestOptions));
    }

    private async __attach(
        phone: string,
        request: Pinnacle.AttachWebhookParams,
        requestOptions?: Webhook.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.ConfiguredWebhook>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                `phone-numbers/${encodeURIComponent(phone)}/attach-webhook`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.ConfiguredWebhook, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Pinnacle.NotFoundError(_response.error.body as Pinnacle.Error_, _response.rawResponse);
                case 500:
                    throw new Pinnacle.InternalServerError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 501:
                    throw new Pinnacle.NotImplementedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError(
                    "Timeout exceeded when calling POST /phone-numbers/{phone}/attach-webhook.",
                );
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Disconnect a webhook from your phone number to stop receiving event notifications for that specific number. <br>
     *
     * The webhook configuration itself remains intact and available for use with other phone numbers.
     *
     * @param {string} phone - The phone number you want to attach the webhook to in E.164 format. Make sure it is url encoded (i.e. replace the leading + with %2B). <br>
     *
     *                         Must be a phone number that you own and currently has the specified webhook attached.
     * @param {number} webhookId - The unique identifier of the webhook you want to detach from the phone number. <br>
     *
     *                             This must be a valid webhook ID that is currently attached to the specified phone number.
     * @param {Webhook.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.NotFoundError}
     * @throws {@link Pinnacle.InternalServerError}
     * @throws {@link Pinnacle.NotImplementedError}
     *
     * @example
     *     await client.phoneNumbers.webhook.detach("+14155551234", 123)
     */
    public detach(
        phone: string,
        webhookId: number,
        requestOptions?: Webhook.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.DetachedWebhookInfo> {
        return core.HttpResponsePromise.fromPromise(this.__detach(phone, webhookId, requestOptions));
    }

    private async __detach(
        phone: string,
        webhookId: number,
        requestOptions?: Webhook.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.DetachedWebhookInfo>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                `phone-numbers/${encodeURIComponent(phone)}/detach-webhook/${encodeURIComponent(webhookId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.DetachedWebhookInfo, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Pinnacle.NotFoundError(_response.error.body as Pinnacle.Error_, _response.rawResponse);
                case 500:
                    throw new Pinnacle.InternalServerError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 501:
                    throw new Pinnacle.NotImplementedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError(
                    "Timeout exceeded when calling DELETE /phone-numbers/{phone}/detach-webhook/{webhookId}.",
                );
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "PINNACLE-API-KEY": apiKeyValue };
    }
}
