/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Pinnacle from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace ContactCard {
    export interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | null | undefined> | null | undefined>;
    }
}

export class ContactCard {
    protected readonly _options: ContactCard.Options;

    constructor(_options: ContactCard.Options = {}) {
        this._options = _options;
    }

    /**
     * Retrieve contact information as a vCard and get a presigned URL to download the file. Contact cards can be sent [via MMS](/api-reference/messages/send-mms) as a media file.
     *
     * @param {Pinnacle.tools.GetVcardParams} request
     * @param {ContactCard.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.tools.contactCard.get({
     *         id: "cc_1234567890"
     *     })
     */
    public get(
        request: Pinnacle.tools.GetVcardParams,
        requestOptions?: ContactCard.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.VCardData> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: Pinnacle.tools.GetVcardParams,
        requestOptions?: ContactCard.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.VCardData>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                "tools/contact-card",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.VCardData, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Pinnacle.InternalServerError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError("Timeout exceeded when calling POST /tools/contact-card.");
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new contact card or updates an existing one with full vCard data. Contact cards can be sent [via MMS](/api-reference/messages/send-mms) as a media file.
     *
     * @param {Pinnacle.tools.UpsertVcardParams} request
     * @param {ContactCard.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.tools.contactCard.upsert({
     *         id: "cc_1234567890",
     *         formattedName: "Jane Smith",
     *         name: {
     *             familyName: "Smith",
     *             givenName: "Jane",
     *             additionalNames: ["A."],
     *             honorificPrefixes: ["Dr."],
     *             honorificSuffixes: ["PhD"]
     *         },
     *         nickname: ["Janie"],
     *         birthday: "1990-02-15",
     *         addresses: [{
     *                 countryName: "USA",
     *                 extendedAddress: "Apt. 4B",
     *                 locality: "Anytown",
     *                 postalCode: "90210",
     *                 postOfficeBox: "PO Box 123",
     *                 region: "CA",
     *                 streetAddress: "123 Main St",
     *                 type: ["HOME", "PREF"]
     *             }],
     *         url: "https://app.pinnacle.sh",
     *         phones: [{
     *                 type: ["CELL"],
     *                 value: "+15551234567"
     *             }],
     *         emails: [{
     *                 type: ["INTERNET"],
     *                 value: "jane.smith@example.com"
     *             }],
     *         timezone: "America/Los_Angeles",
     *         geo: {
     *             latitude: 34.0522,
     *             longitude: -118.2437
     *         },
     *         title: "Engineer",
     *         role: "Developer",
     *         organization: {
     *             name: "Acme Co",
     *             units: ["Engineering", "R&D"]
     *         },
     *         categories: ["Friend", "Colleague"],
     *         note: "Test contact entry",
     *         photo: "https://fastly.picsum.photos/id/853/200/200.jpg?hmac=f4LF-tVBBnJb9PQAVEO8GCTGWgLUnxQLw44rUofE6mQ"
     *     })
     */
    public upsert(
        request: Pinnacle.tools.UpsertVcardParams = {},
        requestOptions?: ContactCard.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.VcardResource> {
        return core.HttpResponsePromise.fromPromise(this.__upsert(request, requestOptions));
    }

    private async __upsert(
        request: Pinnacle.tools.UpsertVcardParams = {},
        requestOptions?: ContactCard.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.VcardResource>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                "tools/contact-card/upsert",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.VcardResource, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Pinnacle.InternalServerError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError("Timeout exceeded when calling POST /tools/contact-card/upsert.");
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "PINNACLE-API-KEY": apiKeyValue };
    }
}
