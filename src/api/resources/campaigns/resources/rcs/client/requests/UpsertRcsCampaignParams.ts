/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Pinnacle from "../../../../../../index.js";

/**
 * @example
 *     {
 *         agent: {
 *             color: "#000000",
 *             description: "Engaging campaigns with RBM \u2013 next-gen SMS marketing with rich content and better analytics.",
 *             emails: [{
 *                     email: "founders@trypinnacle.app",
 *                     label: "Email Us"
 *                 }],
 *             heroUrl: "https://agent-logos.storage.googleapis.com/_/m0bk9mmw7kfynqiKSPfsaoc6",
 *             iconUrl: "https://agent-logos.storage.googleapis.com/_/m0bk9gvlDunZEw1krfruZmw3",
 *             name: "Pinnacle Software Development",
 *             phones: [{
 *                     label: "Contact us directly",
 *                     phone: "+14154467821"
 *                 }],
 *             websites: [{
 *                     label: "Get started with Pinnacle",
 *                     url: "https://www.trypinnacle.app/"
 *                 }]
 *         },
 *         brand: 2,
 *         expectedAgentResponses: ["Here are the things I can help you with.", "I can assist you with booking an appointment, or you may choose to book manually.", "Here are the available times to connect with a representative tomorrow.", "Your appointment has been scheduled."],
 *         links: {
 *             privacyPolicy: "https://www.trypinnacle.app/privacy",
 *             termsOfService: "https://www.trypinnacle.app/terms"
 *         },
 *         optIn: {
 *             method: "WEBSITE",
 *             termsAndConditions: "Would you like to subscribe to Pinnacle?"
 *         },
 *         optOut: {
 *             description: "Reply STOP to opt-out anytime.",
 *             keywords: ["STOP", "UNSUBSCRIBE", "END"]
 *         },
 *         useCase: {
 *             behavior: "Acts as a customer service representative.",
 *             value: "OTHER"
 *         }
 *     }
 */
export interface UpsertRcsCampaignParams {
    /** Create an agent for the campaign. */
    agent?: UpsertRcsCampaignParams.Agent;
    /** Unique identifier for the brand. */
    brand?: number;
    /** Unique identifier for the campaign. */
    campaignId?: number;
    /** List of what the agent might say to users (1-5 required). */
    expectedAgentResponses?: string[];
    /** Legal documentation links. */
    links?: UpsertRcsCampaignParams.Links;
    /** Opt-in configuration. */
    optIn?: UpsertRcsCampaignParams.OptIn;
    /** Opt-out configuration. */
    optOut?: UpsertRcsCampaignParams.OptOut;
    /** Use case classification for the campaign. */
    useCase?: UpsertRcsCampaignParams.UseCase;
}

export namespace UpsertRcsCampaignParams {
    /**
     * Create an agent for the campaign.
     */
    export interface Agent {
        /**
         * Color of the agent's buttons. <br>
         *
         * Must have sufficient contrast with white.
         */
        color?: string;
        /** Description of the agent. */
        description?: string;
        /** List of emails (1-3 required). */
        emails?: Agent.Emails.Item[];
        /** Link to the agent's hero. */
        heroUrl?: string;
        /** Link to the agent's icon. */
        iconUrl?: string;
        /** Name of the agent. */
        name?: string;
        /** List of phone numbers (1-3 required). */
        phones?: Agent.Phones.Item[];
        /** List of urls (1-3 required). */
        websites?: Agent.Websites.Item[];
    }

    export namespace Agent {
        export type Emails = Emails.Item[];

        export namespace Emails {
            export interface Item {
                /** Email attached to the agent. */
                email?: string;
                /** Label for the email. */
                label?: string;
            }
        }

        export type Phones = Phones.Item[];

        export namespace Phones {
            export interface Item {
                /** Label for the phone number. */
                label?: string;
                /** Phone number attached to the agent in E.164 format. */
                phone?: string;
            }
        }

        export type Websites = Websites.Item[];

        export namespace Websites {
            export interface Item {
                /** Label for the url. */
                label?: string;
                /** Url attached to the agent. */
                url?: string;
            }
        }
    }

    /**
     * Legal documentation links.
     */
    export interface Links {
        /** Privacy policy URL. */
        privacyPolicy?: string;
        /** Terms of service URL. */
        termsOfService?: string;
    }

    /**
     * Opt-in configuration.
     */
    export interface OptIn {
        method?: Pinnacle.RcsCampaignOptInMethodEnum;
        /** Message shown to users explaining what they are agreeing to when opting in. */
        termsAndConditions?: string;
    }

    /**
     * Opt-out configuration.
     */
    export interface OptOut {
        /** Description for the keyword. */
        description?: string;
        /**
         * Keywords to opt-out. <br>
         *
         * Each keyword must be a single word with no spaces or whitespace characters.
         */
        keywords?: string[];
    }

    /**
     * Use case classification for the campaign.
     */
    export interface UseCase {
        /** Summary of the use case. */
        behavior?: string;
        value?: Pinnacle.RcsCampaignUseCaseEnum;
    }
}
