/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Pinnacle from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace Company {
    interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        apiKey: core.Supplier<string>;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}

export class Company {
    constructor(protected readonly _options: Company.Options) {}

    /**
     * Retrieve the company's information (i.e. approval status, company name, etc.). Search by company ID or company name.
     *
     * @param {Pinnacle.CompanyGetRequest} request
     * @param {Company.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.company.get()
     */
    public async get(
        request: Pinnacle.CompanyGetRequest = {},
        requestOptions?: Company.RequestOptions
    ): Promise<Pinnacle.Company[]> {
        const { companyId, companyName } = request;
        const _queryParams: Record<string, string | string[] | object | object[]> = {};
        if (companyId != null) {
            _queryParams["companyId"] = companyId.toString();
        }

        if (companyName != null) {
            _queryParams["companyName"] = companyName;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.PinnacleEnvironment.Default,
                "company"
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "rcs-js",
                "X-Fern-SDK-Version": "1.0.12",
                "User-Agent": "rcs-js/1.0.12",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.company.get.Response.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body);
                case 401:
                    throw new Pinnacle.UnauthorizedError(_response.error.body);
                case 500:
                    throw new Pinnacle.InternalServerError(_response.error.body);
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError();
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Register a company for RCS with the Pinnacle platform
     *
     * @param {Pinnacle.CompanyRegisterRequest} request
     * @param {Company.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.company.register({
     *         company: {
     *             name: "name",
     *             address: "address",
     *             ein: "ein",
     *             description: "description",
     *             brandColor: "brandColor",
     *             logoUrl: "logoUrl",
     *             heroUrl: "heroUrl"
     *         },
     *         companyContact: {
     *             primaryWebsiteUrl: "primaryWebsiteUrl",
     *             primaryWebsiteLabel: "primaryWebsiteLabel",
     *             primaryPhone: "primaryPhone",
     *             primaryPhoneLabel: "primaryPhoneLabel",
     *             primaryEmail: "primaryEmail",
     *             primaryEmailLabel: "primaryEmailLabel",
     *             privacyPolicyUrl: "privacyPolicyUrl",
     *             tosUrl: "tosUrl"
     *         },
     *         pointOfContact: {
     *             pocName: "pocName",
     *             pocTitle: "pocTitle",
     *             pocEmail: "pocEmail"
     *         }
     *     })
     */
    public async register(
        request: Pinnacle.CompanyRegisterRequest,
        requestOptions?: Company.RequestOptions
    ): Promise<Pinnacle.CompanyRegisterResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.PinnacleEnvironment.Default,
                "company/register"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "rcs-js",
                "X-Fern-SDK-Version": "1.0.12",
                "User-Agent": "rcs-js/1.0.12",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CompanyRegisterRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.CompanyRegisterResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body);
                case 401:
                    throw new Pinnacle.UnauthorizedError(_response.error.body);
                case 500:
                    throw new Pinnacle.InternalServerError(_response.error.body);
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError();
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Update a company on the Pinnacle platform
     *
     * @param {Pinnacle.CompanyUpdateRequest} request
     * @param {Company.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.company.update({
     *         companyId: "companyId"
     *     })
     */
    public async update(
        request: Pinnacle.CompanyUpdateRequest,
        requestOptions?: Company.RequestOptions
    ): Promise<Pinnacle.CompanyUpdateResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.environment)) ?? environments.PinnacleEnvironment.Default,
                "company/update"
            ),
            method: "POST",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "rcs-js",
                "X-Fern-SDK-Version": "1.0.12",
                "User-Agent": "rcs-js/1.0.12",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.CompanyUpdateRequest.jsonOrThrow(request, { unrecognizedObjectKeys: "strip" }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return serializers.CompanyUpdateResponse.parseOrThrow(_response.body, {
                unrecognizedObjectKeys: "passthrough",
                allowUnrecognizedUnionMembers: true,
                allowUnrecognizedEnumValues: true,
                breadcrumbsPrefix: ["response"],
            });
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body);
                case 401:
                    throw new Pinnacle.UnauthorizedError(_response.error.body);
                case 500:
                    throw new Pinnacle.InternalServerError(_response.error.body);
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError();
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "PINNACLE-API-Key": apiKeyValue };
    }
}
