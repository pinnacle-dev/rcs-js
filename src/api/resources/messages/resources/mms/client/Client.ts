/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Pinnacle from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Mms {
    export interface Options {
        environment?: core.Supplier<environments.PinnacleEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Mms {
    protected readonly _options: Mms.Options;

    constructor(_options: Mms.Options) {
        this._options = _options;
    }

    /**
     * Send a MMS immediately or schedule it for future delivery.
     *
     * @param {Pinnacle.SendMms} request
     * @param {Mms.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Pinnacle.BadRequestError}
     * @throws {@link Pinnacle.UnauthorizedError}
     * @throws {@link Pinnacle.PaymentRequiredError}
     * @throws {@link Pinnacle.NotFoundError}
     * @throws {@link Pinnacle.InternalServerError}
     *
     * @example
     *     await client.messages.mms.send({
     *         from: "+14155164736",
     *         mediaUrls: ["https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0"],
     *         options: {
     *             multiple_messages: true,
     *             validate: true
     *         },
     *         text: "Check out this image!",
     *         to: "+14154746461"
     *     })
     */
    public send(
        request: Pinnacle.SendMms,
        requestOptions?: Mms.RequestOptions,
    ): core.HttpResponsePromise<Pinnacle.messages.MmsSendResponse> {
        return core.HttpResponsePromise.fromPromise(this.__send(request, requestOptions));
    }

    private async __send(
        request: Pinnacle.SendMms,
        requestOptions?: Mms.RequestOptions,
    ): Promise<core.WithRawResponse<Pinnacle.messages.MmsSendResponse>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
            requestOptions?.headers,
        );
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.PinnacleEnvironment.Default,
                "messages/send/mms",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Pinnacle.messages.MmsSendResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Pinnacle.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Pinnacle.UnauthorizedError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 402:
                    throw new Pinnacle.PaymentRequiredError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Pinnacle.NotFoundError(_response.error.body as Pinnacle.Error_, _response.rawResponse);
                case 500:
                    throw new Pinnacle.InternalServerError(
                        _response.error.body as Pinnacle.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.PinnacleError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PinnacleError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.PinnacleTimeoutError("Timeout exceeded when calling POST /messages/send/mms.");
            case "unknown":
                throw new errors.PinnacleError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "PINNACLE-API-KEY": apiKeyValue };
    }
}
