/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Campaign", () => {
    test("attach (e2584533)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phones: ["+14155550123", "+14155559876", "+14155550111"],
            campaignType: "TOLL_FREE",
            campaignId: 101,
        };
        const rawResponseBody = {
            phoneNumbers: [
                { phoneNumber: "+14155550123", campaign: { id: 101, name: "Summer Promo", type: "TOLL_FREE" } },
                { phoneNumber: "+14155559876", campaign: { id: 102, name: "Winter Blast", type: "TOLL_FREE" } },
            ],
            failed: [
                {
                    number: "+14155550111",
                    error: "Number is not available. Make sure your team owns this number and it is not a sandbox number.",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.campaign.attach({
            phones: ["+14155550123", "+14155559876", "+14155550111"],
            campaignType: "TOLL_FREE",
            campaignId: 101,
        });
        expect(response).toEqual({
            phoneNumbers: [
                {
                    phoneNumber: "+14155550123",
                    campaign: {
                        id: 101,
                        name: "Summer Promo",
                        type: "TOLL_FREE",
                    },
                },
                {
                    phoneNumber: "+14155559876",
                    campaign: {
                        id: 102,
                        name: "Winter Blast",
                        type: "TOLL_FREE",
                    },
                },
            ],
            failed: [
                {
                    number: "+14155550111",
                    error: "Number is not available. Make sure your team owns this number and it is not a sandbox number.",
                },
            ],
        });
    });

    test("attach (67a39fcf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"], campaignType: "TOLL_FREE", campaignId: 1 };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.attach({
                phones: ["phones", "phones"],
                campaignType: "TOLL_FREE",
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("attach (88b61c67)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"], campaignType: "TOLL_FREE", campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.attach({
                phones: ["phones", "phones"],
                campaignType: "TOLL_FREE",
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("attach (f0149153)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"], campaignType: "TOLL_FREE", campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.attach({
                phones: ["phones", "phones"],
                campaignType: "TOLL_FREE",
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("attach (4408cbe3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"], campaignType: "TOLL_FREE", campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.attach({
                phones: ["phones", "phones"],
                campaignType: "TOLL_FREE",
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("attach (afbba9a3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"], campaignType: "TOLL_FREE", campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/attach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.attach({
                phones: ["phones", "phones"],
                campaignType: "TOLL_FREE",
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("detach (58f74df8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["+14155559876", "14155550111"] };
        const rawResponseBody = {
            phoneNumbers: [
                { phoneNumber: "+14155559876", campaign: { id: 101, name: "Summer Promo", type: "TOLL_FREE" } },
            ],
            failed: [
                {
                    number: "+14155550111",
                    error: "Number is not available. Make sure your team owns this number and it is not a sandbox number.",
                },
            ],
        };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.campaign.detach({
            phones: ["+14155559876", "14155550111"],
        });
        expect(response).toEqual({
            phoneNumbers: [
                {
                    phoneNumber: "+14155559876",
                    campaign: {
                        id: 101,
                        name: "Summer Promo",
                        type: "TOLL_FREE",
                    },
                },
            ],
            failed: [
                {
                    number: "+14155550111",
                    error: "Number is not available. Make sure your team owns this number and it is not a sandbox number.",
                },
            ],
        });
    });

    test("detach (a945a1aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.detach({
                phones: ["phones", "phones"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("detach (73fc51e4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.detach({
                phones: ["phones", "phones"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("detach (7a74b2c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.detach({
                phones: ["phones", "phones"],
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("detach (76bd67d8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.detach({
                phones: ["phones", "phones"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("detach (46b8db48)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phones: ["phones", "phones"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/detach-campaign")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.campaign.detach({
                phones: ["phones", "phones"],
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
