/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";

describe("Webhook", () => {
    test("attach", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1 };
        const rawResponseBody = {
            webhook: {
                id: 123,
                name: "SMS Delivery Tracker",
                url: "https://api.myapp.com/webhooks/sms-delivery",
                secret: "whsec_1a2b3c4d5e6f7g8h9i0j",
            },
            event: "MESSAGE.STATUS",
            phoneNumber: "+14155551234",
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/%252B14155551234/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.webhook.attach("%2B14155551234", {
            webhookId: 1,
        });
        expect(response).toEqual({
            webhook: {
                id: 123,
                name: "SMS Delivery Tracker",
                url: "https://api.myapp.com/webhooks/sms-delivery",
                secret: "whsec_1a2b3c4d5e6f7g8h9i0j",
            },
            event: "MESSAGE.STATUS",
            phoneNumber: "+14155551234",
        });
    });

    test("detach", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            message: "Webhook detached successfully",
            webhookId: 123,
            phoneNumber: "+14155551234",
        };
        server
            .mockEndpoint()
            .delete("/phone-numbers/%2B14155551234/detach-webhook/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.webhook.detach("+14155551234", 123);
        expect(response).toEqual({
            message: "Webhook detached successfully",
            webhookId: 123,
            phoneNumber: "+14155551234",
        });
    });
});
