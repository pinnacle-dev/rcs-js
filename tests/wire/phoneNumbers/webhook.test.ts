/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Webhook", () => {
    test("attach (4f4a32af)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1 };
        const rawResponseBody = {
            webhook: {
                id: 123,
                name: "SMS Delivery Tracker",
                url: "https://api.myapp.com/webhooks/sms-delivery",
                secret: "whsec_1a2b3c4d5e6f7g8h9i0j",
            },
            event: "MESSAGE.STATUS",
            phoneNumber: "+14155551234",
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/%252B14155551234/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.webhook.attach("%2B14155551234", {
            webhookId: 1,
        });
        expect(response).toEqual({
            webhook: {
                id: 123,
                name: "SMS Delivery Tracker",
                url: "https://api.myapp.com/webhooks/sms-delivery",
                secret: "whsec_1a2b3c4d5e6f7g8h9i0j",
            },
            event: "MESSAGE.STATUS",
            phoneNumber: "+14155551234",
        });
    });

    test("attach (4760e19d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1, event: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/phone/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.attach("phone", {
                webhookId: 1,
                event: null,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("attach (a60940a3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1, event: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/phone/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.attach("phone", {
                webhookId: 1,
                event: null,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("attach (703e6fff)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1, event: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/phone/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.attach("phone", {
                webhookId: 1,
                event: null,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("attach (958b156f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1, event: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/phone/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.attach("phone", {
                webhookId: 1,
                event: null,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("attach (fc062e4f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { webhookId: 1, event: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/phone/attach-webhook")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.attach("phone", {
                webhookId: 1,
                event: null,
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("detach (7a3147d0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            message: "Webhook detached successfully",
            webhookId: 123,
            phoneNumber: "+14155551234",
        };
        server
            .mockEndpoint()
            .delete("/phone-numbers/%2B14155551234/detach-webhook/123")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.webhook.detach("+14155551234", 123);
        expect(response).toEqual({
            message: "Webhook detached successfully",
            webhookId: 123,
            phoneNumber: "+14155551234",
        });
    });

    test("detach (e90e5dbd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/phone/detach-webhook/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.detach("phone", 1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("detach (eb04fe03)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/phone/detach-webhook/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.detach("phone", 1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("detach (cd855df)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/phone/detach-webhook/1")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.detach("phone", 1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("detach (628066cf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/phone/detach-webhook/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.detach("phone", 1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("detach (21b66f2f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .delete("/phone-numbers/phone/detach-webhook/1")
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.webhook.detach("phone", 1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
