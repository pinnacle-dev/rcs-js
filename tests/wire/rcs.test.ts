/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Rcs", () => {
    test("getCapabilities (b2dfa667)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumbers: ["+12345678901", "+19876543210"] };
        const rawResponseBody = {
            "+12345678901": {
                cards: { standalone: true, carousel: true },
                actions: {
                    openUrl: true,
                    call: true,
                    trigger: true,
                    requestUserLocation: true,
                    scheduleEvent: false,
                    sendLocation: false,
                },
            },
            "+19876543210": {
                cards: { standalone: true, carousel: true },
                actions: {
                    openUrl: true,
                    call: true,
                    trigger: true,
                    requestUserLocation: true,
                    scheduleEvent: true,
                    sendLocation: true,
                },
            },
        };
        server
            .mockEndpoint()
            .post("/rcs/capabilities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rcs.getCapabilities({
            phoneNumbers: ["+12345678901", "+19876543210"],
        });
        expect(response).toEqual({
            "+12345678901": {
                cards: {
                    standalone: true,
                    carousel: true,
                },
                actions: {
                    openUrl: true,
                    call: true,
                    trigger: true,
                    requestUserLocation: true,
                    scheduleEvent: false,
                    sendLocation: false,
                },
            },
            "+19876543210": {
                cards: {
                    standalone: true,
                    carousel: true,
                },
                actions: {
                    openUrl: true,
                    call: true,
                    trigger: true,
                    requestUserLocation: true,
                    scheduleEvent: true,
                    sendLocation: true,
                },
            },
        });
    });

    test("getCapabilities (f8a0d286)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumbers: ["phoneNumbers", "phoneNumbers"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/rcs/capabilities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getCapabilities({
                phoneNumbers: ["phoneNumbers", "phoneNumbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getCapabilities (4c8d59de)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumbers: ["phoneNumbers", "phoneNumbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/capabilities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getCapabilities({
                phoneNumbers: ["phoneNumbers", "phoneNumbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("getCapabilities (804645c2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumbers: ["phoneNumbers", "phoneNumbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/capabilities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getCapabilities({
                phoneNumbers: ["phoneNumbers", "phoneNumbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("getCapabilities (3df148c2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumbers: ["phoneNumbers", "phoneNumbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/capabilities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getCapabilities({
                phoneNumbers: ["phoneNumbers", "phoneNumbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("whitelist (6941acd4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agent_XXXXXXXXXXXX", phoneNumber: "+12345678901" };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rcs.whitelist({
            agentId: "agent_XXXXXXXXXXXX",
            phoneNumber: "+12345678901",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("whitelist (4fe14ebc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", phoneNumber: "phoneNumber" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.whitelist({
                agentId: "agentId",
                phoneNumber: "phoneNumber",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("whitelist (f908de54)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", phoneNumber: "phoneNumber" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.whitelist({
                agentId: "agentId",
                phoneNumber: "phoneNumber",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("whitelist (bd605cf0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", phoneNumber: "phoneNumber" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.whitelist({
                agentId: "agentId",
                phoneNumber: "phoneNumber",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("whitelist (d205ec48)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", phoneNumber: "phoneNumber" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.whitelist({
                agentId: "agentId",
                phoneNumber: "phoneNumber",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("whitelist (5f2eee78)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", phoneNumber: "phoneNumber" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/whitelist")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.whitelist({
                agentId: "agentId",
                phoneNumber: "phoneNumber",
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("getLink (da7648b3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            agentId: "agent_XXXXXXXXXXXX",
            testMode: false,
            phoneNumber: "+12345678901",
            body: "Hello, I need help with my order",
        };
        const rawResponseBody = {
            url: "sms://+12345678901?service_id=pinnacletest_agent&body=Hello%20from%20RCS!",
            serviceId: "pinnacletest_agent",
        };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rcs.getLink({
            agentId: "agent_XXXXXXXXXXXX",
            testMode: false,
            phoneNumber: "+12345678901",
            body: "Hello, I need help with my order",
        });
        expect(response).toEqual({
            url: "sms://+12345678901?service_id=pinnacletest_agent&body=Hello%20from%20RCS!",
            serviceId: "pinnacletest_agent",
        });
    });

    test("getLink (6aa5d764)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", testMode: undefined, phoneNumber: undefined, body: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getLink({
                agentId: "agentId",
                testMode: undefined,
                phoneNumber: undefined,
                body: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getLink (c3ff50ec)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", testMode: undefined, phoneNumber: undefined, body: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getLink({
                agentId: "agentId",
                testMode: undefined,
                phoneNumber: undefined,
                body: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("getLink (d36caaa8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", testMode: undefined, phoneNumber: undefined, body: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getLink({
                agentId: "agentId",
                testMode: undefined,
                phoneNumber: undefined,
                body: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("getLink (5c45bda0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", testMode: undefined, phoneNumber: undefined, body: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getLink({
                agentId: "agentId",
                testMode: undefined,
                phoneNumber: undefined,
                body: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("getLink (5ab37dd0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { agentId: "agentId", testMode: undefined, phoneNumber: undefined, body: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/rcs/link")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.rcs.getLink({
                agentId: "agentId",
                testMode: undefined,
                phoneNumber: undefined,
                body: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
