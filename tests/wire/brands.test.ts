/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Brands", () => {
    test("autofill (57d27b9f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additional_info:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            name: "Pinnacle",
            options: { forceReload: true },
            website: "https://www.pinnacle.sh",
        };
        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        };
        server
            .mockEndpoint()
            .post("/brands/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.autofill({
            additional_info:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            name: "Pinnacle",
            options: {
                forceReload: true,
            },
            website: "https://www.pinnacle.sh",
        });
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        });
    });

    test("autofill (cd96a2d7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additional_info: undefined, name: undefined, options: undefined, website: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/brands/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.autofill({
                additional_info: undefined,
                name: undefined,
                options: undefined,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("autofill (21c53f1e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additional_info: undefined, name: undefined, options: undefined, website: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.autofill({
                additional_info: undefined,
                name: undefined,
                options: undefined,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("autofill (596a7d02)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additional_info: undefined, name: undefined, options: undefined, website: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.autofill({
                additional_info: undefined,
                name: undefined,
                options: undefined,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("upsert (e91948c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            id: 1,
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        };
        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "email",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            status: "VERIFIED",
            updatedAt: "2024-05-08T07:58:01.291",
        };
        server
            .mockEndpoint()
            .post("/brands")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.upsert({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            id: 1,
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        });
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "email",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            status: "VERIFIED",
            updatedAt: "2024-05-08T07:58:01.291",
        });
    });

    test("upsert (418ac479)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: undefined,
            contact: null,
            dba: undefined,
            description: undefined,
            ein: undefined,
            email: undefined,
            id: undefined,
            name: undefined,
            sector: null,
            type: null,
            website: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/brands")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.upsert({
                address: undefined,
                contact: null,
                dba: undefined,
                description: undefined,
                ein: undefined,
                email: undefined,
                id: undefined,
                name: undefined,
                sector: null,
                type: null,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("upsert (3e3563a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: undefined,
            contact: null,
            dba: undefined,
            description: undefined,
            ein: undefined,
            email: undefined,
            id: undefined,
            name: undefined,
            sector: null,
            type: null,
            website: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.upsert({
                address: undefined,
                contact: null,
                dba: undefined,
                description: undefined,
                ein: undefined,
                email: undefined,
                id: undefined,
                name: undefined,
                sector: null,
                type: null,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("upsert (8b64bbbc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: undefined,
            contact: null,
            dba: undefined,
            description: undefined,
            ein: undefined,
            email: undefined,
            id: undefined,
            name: undefined,
            sector: null,
            type: null,
            website: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.upsert({
                address: undefined,
                contact: null,
                dba: undefined,
                description: undefined,
                ein: undefined,
                email: undefined,
                id: undefined,
                name: undefined,
                sector: null,
                type: null,
                website: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("get (d3c28716)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            status: "VERIFIED",
            updatedAt: "2024-05-08T07:58:01.291",
            lastTcrVettingDate: "lastTcrVettingDate",
            tcrFeedback: [{ description: "description", displayName: "displayName", fields: ["fields"], id: "id" }],
            vettingHistory: [
                {
                    provider: "AEGIS",
                    vettingClass: "STANDARD",
                    vettingDate: "vettingDate",
                    vettingScore: 1.1,
                    vettingStatus: "ACTIVE",
                },
            ],
        };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.get(1);
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            status: "VERIFIED",
            updatedAt: "2024-05-08T07:58:01.291",
            lastTcrVettingDate: "lastTcrVettingDate",
            tcrFeedback: [
                {
                    description: "description",
                    displayName: "displayName",
                    fields: ["fields"],
                    id: "id",
                },
            ],
            vettingHistory: [
                {
                    provider: "AEGIS",
                    vettingClass: "STANDARD",
                    vettingDate: "vettingDate",
                    vettingScore: 1.1,
                    vettingStatus: "ACTIVE",
                },
            ],
        });
    });

    test("get (e72aa068)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.get(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (38965f2f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.get(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (51dbad9b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.get(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("get (1368280b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.get(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("submit (a2f904e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.submit(1);
        expect(response).toEqual({
            success: true,
        });
    });

    test("submit (fb12fbc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("submit (c926e4e4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("submit (797584c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(402).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("submit (961e95c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("submit (e1aa1ad8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("submit (b1a58e48)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(501).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.brands.submit(1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("validate (437ffa3f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "Pinnacle is an SMS, MMS, and RCS API for scaling conversations with customers you value.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        };
        const rawResponseBody = {
            errors: [{ description: "description", example: "example", field: "field" }],
            isValid: true,
        };
        server
            .mockEndpoint()
            .post("/brands/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.validate({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "Pinnacle is an SMS, MMS, and RCS API for scaling conversations with customers you value.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        });
        expect(response).toEqual({
            errors: [
                {
                    description: "description",
                    example: "example",
                    field: "field",
                },
            ],
            isValid: true,
        });
    });

    test("validate (c29b5a5b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "address",
            contact: { email: "email", name: "name", phone: "phone", title: "title" },
            dba: undefined,
            description: "description",
            ein: undefined,
            email: "email",
            name: "name",
            sector: "AGRICULTURE",
            type: "GOVERNMENT",
            website: "website",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/brands/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.validate({
                address: "address",
                contact: {
                    email: "email",
                    name: "name",
                    phone: "phone",
                    title: "title",
                },
                dba: undefined,
                description: "description",
                ein: undefined,
                email: "email",
                name: "name",
                sector: "AGRICULTURE",
                type: "GOVERNMENT",
                website: "website",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (1c580d92)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "address",
            contact: { email: "email", name: "name", phone: "phone", title: "title" },
            dba: undefined,
            description: "description",
            ein: undefined,
            email: "email",
            name: "name",
            sector: "AGRICULTURE",
            type: "GOVERNMENT",
            website: "website",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.validate({
                address: "address",
                contact: {
                    email: "email",
                    name: "name",
                    phone: "phone",
                    title: "title",
                },
                dba: undefined,
                description: "description",
                ein: undefined,
                email: "email",
                name: "name",
                sector: "AGRICULTURE",
                type: "GOVERNMENT",
                website: "website",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (d9bc95c6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "address",
            contact: { email: "email", name: "name", phone: "phone", title: "title" },
            dba: undefined,
            description: "description",
            ein: undefined,
            email: "email",
            name: "name",
            sector: "AGRICULTURE",
            type: "GOVERNMENT",
            website: "website",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.validate({
                address: "address",
                contact: {
                    email: "email",
                    name: "name",
                    phone: "phone",
                    title: "title",
                },
                dba: undefined,
                description: "description",
                ein: undefined,
                email: "email",
                name: "name",
                sector: "AGRICULTURE",
                type: "GOVERNMENT",
                website: "website",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("vet (57fea9c6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.vet(1, {});
        expect(response).toEqual({
            success: true,
        });
    });

    test("vet (4088a0bb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("vet (d73f22b2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("vet (75960b92)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("vet (16d4110e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("vet (1bee81e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("vet (a7e4d06)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL", provider: "AEGIS", vettingClass: "STANDARD" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.brands.vet(1, {});
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
