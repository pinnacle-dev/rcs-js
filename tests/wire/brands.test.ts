/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Brands", () => {
    test("autofill", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additional_info:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            name: "Pinnacle",
            options: { forceReload: true },
            website: "https://www.pinnacle.sh",
        };
        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        };
        server
            .mockEndpoint()
            .post("/brands/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.autofill({
            additional_info:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            name: "Pinnacle",
            options: {
                forceReload: true,
            },
            website: "https://www.pinnacle.sh",
        });
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle Messaging",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            id: 1,
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        };
        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "email",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            updatedAt: "2024-05-08T07:58:01.291",
        };
        server
            .mockEndpoint()
            .post("/brands")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.upsert({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            id: 1,
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
        });
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description:
                "A developer-friendly, compliant API for SMS, MMS, and RCS, built to scale real conversations.",
            ein: "88-1234567",
            email: "email",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            updatedAt: "2024-05-08T07:58:01.291",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            updatedAt: "2024-05-08T07:58:01.291",
            vettingHistory: [
                {
                    provider: "AEGIS",
                    vettingClass: "STANDARD",
                    vettingDate: "vettingDate",
                    vettingScore: 1.1,
                    vettingStatus: "COMPLETED",
                },
            ],
        };
        server.mockEndpoint().get("/brands/1").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.get(1);
        expect(response).toEqual({
            address: "500 Folsom St, San Francisco, CA 94105",
            contact: {
                email: "michael.chen@trypinnacle.app",
                name: "Michael Chen",
                phone: "+14155551234",
                title: "Customer Support Representative",
            },
            dba: "Pinnacle RCS",
            description: "description",
            ein: "88-1234567",
            email: "founders@trypinnacle.app",
            name: "Pinnacle",
            sector: "TECHNOLOGY",
            type: "PRIVATE_PROFIT",
            website: "https://www.pinnacle.sh",
            createdAt: "2024-09-11T19:41:12.099",
            id: 1,
            isArchived: false,
            updatedAt: "2024-05-08T07:58:01.291",
            vettingHistory: [
                {
                    provider: "AEGIS",
                    vettingClass: "STANDARD",
                    vettingDate: "vettingDate",
                    vettingScore: 1.1,
                    vettingStatus: "COMPLETED",
                },
            ],
        });
    });

    test("submit", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true };
        server.mockEndpoint().post("/brands/1/submit").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.brands.submit(1);
        expect(response).toEqual({
            success: true,
        });
    });

    test("validate", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            errors: [{ description: "description", example: "example", field: "field" }],
            isValid: true,
        };
        server
            .mockEndpoint()
            .post("/brands/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.validate({});
        expect(response).toEqual({
            errors: [
                {
                    description: "description",
                    example: "example",
                    field: "field",
                },
            ],
            isValid: true,
        });
    });

    test("vet", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "EXTERNAL" };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/brands/1/vet")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.brands.vet(1, {});
        expect(response).toEqual({
            success: true,
        });
    });
});
