/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Sms", () => {
    test("send (Send SMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "+14155164736", text: "Hey! ðŸ˜‚", to: "+14154746461" };
        const rawResponseBody = {
            messageId: 123,
            segments: { count: 1, encoding: "gsm7" },
            totalCost: 10,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.sms.send({
            from: "+14155164736",
            text: "Hey! \uD83D\uDE02",
            to: "+14154746461",
        });
        expect(response).toEqual({
            messageId: 123,
            segments: {
                count: 1,
                encoding: "gsm7",
            },
            totalCost: 10,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        });
    });

    test("send (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "+14155164736", text: "Hey! ðŸ˜‚", to: "+14154746461" };
        const rawResponseBody = {
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.sms.send({
            from: "+14155164736",
            text: "Hey! \uD83D\uDE02",
            to: "+14154746461",
        });
        expect(response).toEqual({
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("send (b408a1a2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.send({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("send (e4953adc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.send({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("send (266b405c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.send({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("send (20fe6458)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.send({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("send (712eb4d0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.send({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("validate (6c2227e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "Hello from Pinnacle" };
        const rawResponseBody = {
            isOverSegmentLimit: false,
            segments: {
                gsm7: { totalBytes: 11, unsupported: ["unsupported"], value: ["Hello from Pinnacle"] },
                utf16: { totalBytes: 24, value: ["Hello from Pinnacle"] },
            },
            total: { gsm7: 0.01, utf16: 0.01 },
            unit: 0.01,
        };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.sms.validate({
            text: "Hello from Pinnacle",
        });
        expect(response).toEqual({
            isOverSegmentLimit: false,
            segments: {
                gsm7: {
                    totalBytes: 11,
                    unsupported: ["unsupported"],
                    value: ["Hello from Pinnacle"],
                },
                utf16: {
                    totalBytes: 24,
                    value: ["Hello from Pinnacle"],
                },
            },
            total: {
                gsm7: 0.01,
                utf16: 0.01,
            },
            unit: 0.01,
        });
    });

    test("validate (44042734)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (6095a68e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (3094dd32)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
