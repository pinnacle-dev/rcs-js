/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Rcs", () => {
    test("send (Send RCS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [{ payload: "payload", title: "title", type: "openUrl" }],
            text: "text",
            from: "from",
            to: "to",
        };
        const rawResponseBody = {
            messageIds: 1.1,
            segments: 1,
            totalCost: 1.1,
            sender: "sender",
            recipient: "recipient",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.rcs.send({
            quickReplies: [
                {
                    type: "openUrl",
                    payload: "payload",
                    title: "title",
                },
            ],
            text: "text",
            from: "from",
            to: "to",
        });
        expect(response).toEqual({
            messageIds: 1.1,
            segments: 1,
            totalCost: 1.1,
            sender: "sender",
            recipient: "recipient",
            status: "queued",
        });
    });

    test("send (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [{ payload: "payload", title: "title", type: "openUrl" }],
            text: "text",
            from: "from",
            to: "to",
        };
        const rawResponseBody = {
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.rcs.send({
            quickReplies: [
                {
                    type: "openUrl",
                    payload: "payload",
                    title: "title",
                },
            ],
            text: "text",
            from: "from",
            to: "to",
        });
        expect(response).toEqual({
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("send (eff62a1b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.send({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("send (917ee43b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.send({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("send (95d5542b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.send({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("send (6df61657)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.send({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("send (767632e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.send({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("validate (2433179f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [{ payload: "payload", title: "title", type: "openUrl" }],
            text: "text",
        };
        const rawResponseBody = { total: 0.03, unit: 0.03, unsupportedFiles: ["unsupportedFiles"] };
        server
            .mockEndpoint()
            .post("/messages/validate/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.rcs.validate({
            quickReplies: [
                {
                    type: "openUrl",
                    payload: "payload",
                    title: "title",
                },
            ],
            text: "text",
        });
        expect(response).toEqual({
            total: 0.03,
            unit: 0.03,
            unsupportedFiles: ["unsupportedFiles"],
        });
    });

    test("validate (defc64e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/validate/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.validate({
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (ee669ac9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.validate({
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (68083275)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.rcs.validate({
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
