/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Send", () => {
    test("sms (Send SMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "+14155164736", text: "Hey! ðŸ˜‚", to: "+14154746461" };
        const rawResponseBody = {
            messageId: 123,
            segments: { count: 1, encoding: "gsm7" },
            totalCost: 10,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.sms({
            from: "+14155164736",
            text: "Hey! \uD83D\uDE02",
            to: "+14154746461",
        });
        expect(response).toEqual({
            messageId: 123,
            segments: {
                count: 1,
                encoding: "gsm7",
            },
            totalCost: 10,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        });
    });

    test("sms (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "+14155164736", text: "Hey! ðŸ˜‚", to: "+14154746461" };
        const rawResponseBody = {
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.sms({
            from: "+14155164736",
            text: "Hey! \uD83D\uDE02",
            to: "+14154746461",
        });
        expect(response).toEqual({
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("sms (a57a6c1f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.sms({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("sms (87196a97)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.sms({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("sms (659d7d97)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.sms({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("sms (e55c16c3)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.sms({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("sms (11fb6693)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", options: undefined, text: "text", to: "to" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.sms({
                from: "from",
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("mms (Send MMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: { multiple_messages: true, validate: true },
            text: "Check out this image!",
            to: "+14154746461",
        };
        const rawResponseBody = {
            messageIds: [101, 102],
            segments: 3,
            totalCost: 0.09,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.mms({
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: {
                multiple_messages: true,
                validate: true,
            },
            text: "Check out this image!",
            to: "+14154746461",
        });
        expect(response).toEqual({
            messageIds: [101, 102],
            segments: 3,
            totalCost: 0.09,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        });
    });

    test("mms (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: { multiple_messages: true, validate: true },
            text: "Check out this image!",
            to: "+14154746461",
        };
        const rawResponseBody = {
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.mms({
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: {
                multiple_messages: true,
                validate: true,
            },
            text: "Check out this image!",
            to: "+14154746461",
        });
        expect(response).toEqual({
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("mms (92754df9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.mms({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("mms (12fa3221)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.mms({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("mms (a9a50371)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.mms({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("mms (5b6a97cd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.mms({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("mms (b3f204ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.mms({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("rcs (Send RCS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [{ payload: "payload", title: "title", type: "openUrl" }],
            text: "text",
            from: "from",
            to: "to",
        };
        const rawResponseBody = {
            messageIds: 1.1,
            segments: 1,
            totalCost: 1.1,
            sender: "sender",
            recipient: "recipient",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.rcs({
            quickReplies: [
                {
                    type: "openUrl",
                    payload: "payload",
                    title: "title",
                },
            ],
            text: "text",
            from: "from",
            to: "to",
        });
        expect(response).toEqual({
            messageIds: 1.1,
            segments: 1,
            totalCost: 1.1,
            sender: "sender",
            recipient: "recipient",
            status: "queued",
        });
    });

    test("rcs (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            quickReplies: [{ payload: "payload", title: "title", type: "openUrl" }],
            text: "text",
            from: "from",
            to: "to",
        };
        const rawResponseBody = {
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.send.rcs({
            quickReplies: [
                {
                    type: "openUrl",
                    payload: "payload",
                    title: "title",
                },
            ],
            text: "text",
            from: "from",
            to: "to",
        });
        expect(response).toEqual({
            scheduleId: 987654321,
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("rcs (586ded41)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.rcs({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("rcs (cc1fdbe9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.rcs({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("rcs (78fee59)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.rcs({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("rcs (d0ac5d5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.rcs({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("rcs (8c115a95)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            options: undefined,
            to: "to",
            quickReplies: [
                { type: "openUrl", payload: "payload", title: "title" },
                { type: "openUrl", payload: "payload", title: "title" },
            ],
            text: "text",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.send.rcs({
                from: "from",
                options: undefined,
                to: "to",
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                ],
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
