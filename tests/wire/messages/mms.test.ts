/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Mms", () => {
    test("send (Send MMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: { multiple_messages: true, validate: true },
            text: "Check out this image!",
            to: "+14154746461",
        };
        const rawResponseBody = {
            messageIds: ["msg_1234567890", "msg_1234567891"],
            segments: 3,
            totalCost: 0.09,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.mms.send({
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: {
                multiple_messages: true,
                validate: true,
            },
            text: "Check out this image!",
            to: "+14154746461",
        });
        expect(response).toEqual({
            messageIds: ["msg_1234567890", "msg_1234567891"],
            segments: 3,
            totalCost: 0.09,
            sender: "+14155164736",
            recipient: "+14154746461",
            status: "queued",
        });
    });

    test("send (Scheduled Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: { multiple_messages: true, validate: true },
            text: "Check out this image!",
            to: "+14154746461",
        };
        const rawResponseBody = {
            scheduleId: "msg_sched_1234567890",
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.mms.send({
            from: "+14155164736",
            mediaUrls: [
                "https://fastly.picsum.photos/id/941/300/300.jpg?hmac=mDxM9PWSqRDjecwSCEpzU4bj35gqnG7yA25OL29uNv0",
            ],
            options: {
                multiple_messages: true,
                validate: true,
            },
            text: "Check out this image!",
            to: "+14154746461",
        });
        expect(response).toEqual({
            scheduleId: "msg_sched_1234567890",
            config: {
                sendAt: "2024-08-01T09:00:00",
                recurrence: "cron(0 9 * * MON-FRI *)",
                timezone: "UTC",
                endDate: "endDate",
            },
        });
    });

    test("send (d2ea1c4a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("send (9e9b724a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("send (940f51aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("send (27bebbe)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("send (fbbb2e1e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("send (b65e8a1e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: "from",
            mediaUrls: ["mediaUrls", "mediaUrls"],
            options: undefined,
            text: "text",
            to: "to",
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.send({
                from: "from",
                mediaUrls: ["mediaUrls", "mediaUrls"],
                options: undefined,
                text: "text",
                to: "to",
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("validate (78eba654)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            mediaUrls: [
                "https://upload.wikimedia.org/wikipedia/commons/b/b9/Pizigani_1367_Chart_1MB.jpg",
                "https://fastly.picsum.photos/id/528/1000/1000.jpg?hmac=aTG0xNif9KbNryFN0ZNZ_nFK6aEpZxqUGCZF1KjOT8w",
                "https://file-examples.com/storage/fefdd7ab126835e7993bb1a/2017/10/file_example_JPG_500kB.jpg",
            ],
            text: "Check out these images!",
        };
        const rawResponseBody = {
            segments: {
                count: 1,
                unsupportedFiles: [
                    "https://file-examples.com/storage/fefdd7ab126835e7993bb1a/2017/10/file_example_JPG_500kB.jpg",
                ],
                value: [
                    {
                        files: [
                            "https://upload.wikimedia.org/wikipedia/commons/b/b9/Pizigani_1367_Chart_1MB.jpg",
                            "https://fastly.picsum.photos/id/528/1000/1000.jpg?hmac=aTG0xNif9KbNryFN0ZNZ_nFK6aEpZxqUGCZF1KjOT8w",
                        ],
                        size: 1234,
                        text: "Check out these images!",
                    },
                ],
            },
            total: 0.03,
            unit: 0.03,
        };
        server
            .mockEndpoint()
            .post("/messages/validate/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.mms.validate({
            mediaUrls: [
                "https://upload.wikimedia.org/wikipedia/commons/b/b9/Pizigani_1367_Chart_1MB.jpg",
                "https://fastly.picsum.photos/id/528/1000/1000.jpg?hmac=aTG0xNif9KbNryFN0ZNZ_nFK6aEpZxqUGCZF1KjOT8w",
                "https://file-examples.com/storage/fefdd7ab126835e7993bb1a/2017/10/file_example_JPG_500kB.jpg",
            ],
            text: "Check out these images!",
        });
        expect(response).toEqual({
            segments: {
                count: 1,
                unsupportedFiles: [
                    "https://file-examples.com/storage/fefdd7ab126835e7993bb1a/2017/10/file_example_JPG_500kB.jpg",
                ],
                value: [
                    {
                        files: [
                            "https://upload.wikimedia.org/wikipedia/commons/b/b9/Pizigani_1367_Chart_1MB.jpg",
                            "https://fastly.picsum.photos/id/528/1000/1000.jpg?hmac=aTG0xNif9KbNryFN0ZNZ_nFK6aEpZxqUGCZF1KjOT8w",
                        ],
                        size: 1234,
                        text: "Check out these images!",
                    },
                ],
            },
            total: 0.03,
            unit: 0.03,
        });
    });

    test("validate (bf369089)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mediaUrls: ["mediaUrls", "mediaUrls"], text: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/validate/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.validate({
                mediaUrls: ["mediaUrls", "mediaUrls"],
                text: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (6fb362eb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mediaUrls: ["mediaUrls", "mediaUrls"], text: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.validate({
                mediaUrls: ["mediaUrls", "mediaUrls"],
                text: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (ab4d9357)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { mediaUrls: ["mediaUrls", "mediaUrls"], text: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.mms.validate({
                mediaUrls: ["mediaUrls", "mediaUrls"],
                text: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
