/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Webhooks", () => {
    test("get (d647dfdf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            identifiers: [
                "https://www.pinnacle.sh/payment",
                "+14155678901",
                "https://www.pinnacle.sh/sms-callback",
                "+14153456659",
            ],
        };
        const rawResponseBody = {
            webhooks: [
                {
                    endpoint: "https://www.pinnacle.sh/examples/check-payment",
                    id: 1,
                    name: "Payment Notification Webhook",
                },
                {
                    endpoint: "https://www.pinnacle.sh/examples/talk-to-my-friends",
                    id: 2,
                    name: "SMS Delivery Webhook",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.webhooks.get({
            identifiers: [
                "https://www.pinnacle.sh/payment",
                "+14155678901",
                "https://www.pinnacle.sh/sms-callback",
                "+14153456659",
            ],
        });
        expect(response).toEqual({
            webhooks: [
                {
                    endpoint: "https://www.pinnacle.sh/examples/check-payment",
                    id: 1,
                    name: "Payment Notification Webhook",
                },
                {
                    endpoint: "https://www.pinnacle.sh/examples/talk-to-my-friends",
                    id: 2,
                    name: "SMS Delivery Webhook",
                },
            ],
        });
    });

    test("get (74f33452)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { identifiers: ["identifiers", "identifiers"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.get({
                identifiers: ["identifiers", "identifiers"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (288f78d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { identifiers: ["identifiers", "identifiers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.get({
                identifiers: ["identifiers", "identifiers"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (3de92905)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { identifiers: ["identifiers", "identifiers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/webhooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.webhooks.get({
                identifiers: ["identifiers", "identifiers"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
