/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";

describe("Send", () => {
    test("rcs", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { from: "from", to: "to" };
        const rawResponseBody = { messageId: "1", message: "RCS message sent successfully" };
        server
            .mockEndpoint()
            .post("/send/rcs")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.send.rcs({
            from: "from",
            to: "to",
        });
        expect(response).toEqual({
            messageId: "1",
            message: "RCS message sent successfully",
        });
    });

    test("sms", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "to", from: "from", text: "text" };
        const rawResponseBody = { messageId: "1", message: "SMS message sent successfully" };
        server
            .mockEndpoint()
            .post("/send/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.send.sms({
            to: "to",
            from: "from",
            text: "text",
        });
        expect(response).toEqual({
            messageId: "1",
            message: "SMS message sent successfully",
        });
    });

    test("mms", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            to: "to",
            from: "from",
            mediaUrls: ["https://example.com/image1.jpg", "https://example.com/video.mp4"],
        };
        const rawResponseBody = { messageId: "1", message: "MMS message sent successfully" };
        server
            .mockEndpoint()
            .post("/send/mms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.send.mms({
            to: "to",
            from: "from",
            mediaUrls: ["https://example.com/image1.jpg", "https://example.com/video.mp4"],
        });
        expect(response).toEqual({
            messageId: "1",
            message: "MMS message sent successfully",
        });
    });
});
