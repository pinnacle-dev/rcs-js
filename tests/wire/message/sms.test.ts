/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Sms", () => {
    test("validate (6c2227e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "Hello from Pinnacle" };
        const rawResponseBody = {
            isOverSegmentLimit: false,
            segments: {
                gsm7: { totalBytes: 11, unsupported: ["unsupported"], value: ["Hello from Pinnacle"] },
                utf16: { totalBytes: 24, value: ["Hello from Pinnacle"] },
            },
            total: { gsm7: 0.01, utf16: 0.01 },
            unit: 0.01,
        };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.message.sms.validate({
            text: "Hello from Pinnacle",
        });
        expect(response).toEqual({
            isOverSegmentLimit: false,
            segments: {
                gsm7: {
                    totalBytes: 11,
                    unsupported: ["unsupported"],
                    value: ["Hello from Pinnacle"],
                },
                utf16: {
                    totalBytes: 24,
                    value: ["Hello from Pinnacle"],
                },
            },
            total: {
                gsm7: 0.01,
                utf16: 0.01,
            },
            unit: 0.01,
        });
    });

    test("validate (3c0e6266)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.message.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (a48e1e58)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.message.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (eb8429ec)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { text: "text" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/validate/sms")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.message.sms.validate({
                text: "text",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
