/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Url", () => {
    test("create (839dd45f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "https://www.pinnacle.sh/", options: { expiresAt: "2025-06-23T16:18:25.000Z" } };
        const rawResponseBody = {
            url: "https://pncl.to/hJCJadm9",
            config: { to: "https://docs.pinnacle.sh/", expiresAt: "2025-06-23T16:18:25+00:00" },
        };
        server
            .mockEndpoint()
            .post("/tools/url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.url.create({
            url: "https://www.pinnacle.sh/",
            options: {
                expiresAt: "2025-06-23T16:18:25.000Z",
            },
        });
        expect(response).toEqual({
            url: "https://pncl.to/hJCJadm9",
            config: {
                to: "https://docs.pinnacle.sh/",
                expiresAt: "2025-06-23T16:18:25+00:00",
            },
        });
    });

    test("create (19bacff8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "url", options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tools/url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.create({
                url: "url",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (5871e4e8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "url", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.create({
                url: "url",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("create (37a452fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "url", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/url")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.create({
                url: "url",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("get (3f4cffa5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            url: "https://pncl.to/ePzVxILF",
            config: { to: "https://pinnacle.sh", expiresAt: "2023-10-23T16:18:25+00:00" },
            clicks: [
                {
                    created_at: "2025-07-09T23:57:28.889+00:00",
                    is_bot: false,
                    latency_ms: 400,
                    metadata: { key: "value" },
                    method: "GET",
                    redirect_hops: 0,
                    status_code: 302,
                    user_agent: "vscode-restclient",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/tools/url/ePzVxILF")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.url.get("ePzVxILF");
        expect(response).toEqual({
            url: "https://pncl.to/ePzVxILF",
            config: {
                to: "https://pinnacle.sh",
                expiresAt: "2023-10-23T16:18:25+00:00",
            },
            clicks: [
                {
                    created_at: "2025-07-09T23:57:28.889+00:00",
                    is_bot: false,
                    latency_ms: 400,
                    metadata: {
                        key: "value",
                    },
                    method: "GET",
                    redirect_hops: 0,
                    status_code: 302,
                    user_agent: "vscode-restclient",
                },
            ],
        });
    });

    test("get (f6530def)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/tools/url/linkId").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tools.url.get("linkId");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (676a10e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/tools/url/linkId").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tools.url.get("linkId");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (6426b6d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/tools/url/linkId").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.tools.url.get("linkId");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("update (7f57c7b6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: "https://www.pinnacle.sh/" };
        const rawResponseBody = {
            url: "https://pncl.to/hJCJadm9",
            config: { to: "https://www.pinnacle.sh/", expiresAt: "2025-06-23T16:18:25+00:00" },
        };
        server
            .mockEndpoint()
            .put("/tools/url/ePzVxILF")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.url.update("ePzVxILF", {
            url: "https://www.pinnacle.sh/",
        });
        expect(response).toEqual({
            url: "https://pncl.to/hJCJadm9",
            config: {
                to: "https://www.pinnacle.sh/",
                expiresAt: "2025-06-23T16:18:25+00:00",
            },
        });
    });

    test("update (a619276c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: undefined, options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/tools/url/linkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.update("linkId", {
                url: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (9d5ac864)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: undefined, options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/tools/url/linkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.update("linkId", {
                url: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("update (ea62ce58)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { url: undefined, options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/tools/url/linkId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.url.update("linkId", {
                url: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
