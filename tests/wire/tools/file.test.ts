/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("File_", () => {
    test("upload (6e8111f1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            contentType: "image/jpeg",
            size: 1024,
            name: "test.jpg",
            options: { download: { expiresAt: "2025-06-30T12:00:00.000Z" } },
        };
        const rawResponseBody = {
            uploadUrl: "https://server.trypinnacle.app/storage/v2/object/upload/sign/vault/3/test.jpg?token=example",
            downloadUrl: "https://server.trypinnacle.app/storage/v2/object/sign/vault/3/test.jpg?token=example",
            metadata: { fileName: "test.jpg", contentType: "image/jpeg", expiresAt: "2025-08-30T12:00:00.000Z" },
        };
        server
            .mockEndpoint()
            .post("/tools/files/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.file.upload({
            contentType: "image/jpeg",
            size: 1024,
            name: "test.jpg",
            options: {
                download: {
                    expiresAt: "2025-06-30T12:00:00.000Z",
                },
            },
        });
        expect(response).toEqual({
            uploadUrl: "https://server.trypinnacle.app/storage/v2/object/upload/sign/vault/3/test.jpg?token=example",
            downloadUrl: "https://server.trypinnacle.app/storage/v2/object/sign/vault/3/test.jpg?token=example",
            metadata: {
                fileName: "test.jpg",
                contentType: "image/jpeg",
                expiresAt: "2025-08-30T12:00:00.000Z",
            },
        });
    });

    test("upload (87cfceef)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { contentType: "contentType", size: 1, name: undefined, options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tools/files/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.upload({
                contentType: "contentType",
                size: 1,
                name: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("upload (d94383e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { contentType: "contentType", size: 1, name: undefined, options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/files/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.upload({
                contentType: "contentType",
                size: 1,
                name: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("upload (3951fe6d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { contentType: "contentType", size: 1, name: undefined, options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/files/upload")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.upload({
                contentType: "contentType",
                size: 1,
                name: undefined,
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("refresh (aad5dc29)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            urls: [
                "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=oldtoken",
                "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=oldtoken2",
                "invalid/url",
                "https://google.com",
            ],
        };
        const rawResponseBody = [
            {
                original: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=oldtoken",
                refreshed: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=newtoken",
            },
            {
                original: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=oldtoken2",
                refreshed: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=newtoken2",
            },
            { original: "invalid/url", refreshed: "invalid/url" },
            { original: "https://google.com", refreshed: "https://google.com" },
        ];
        server
            .mockEndpoint()
            .post("/tools/files/refresh")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.file.refresh({
            urls: [
                "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=oldtoken",
                "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=oldtoken2",
                "invalid/url",
                "https://google.com",
            ],
        });
        expect(response).toEqual([
            {
                original: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=oldtoken",
                refreshed: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/test.jpg?token=newtoken",
            },
            {
                original: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=oldtoken2",
                refreshed: "https://server.trypinnacle.app/storage/v1/object/sign/vault/3/document.pdf?token=newtoken2",
            },
            {
                original: "invalid/url",
                refreshed: "invalid/url",
            },
            {
                original: "https://google.com",
                refreshed: "https://google.com",
            },
        ]);
    });

    test("refresh (c87aa06e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { urls: ["urls", "urls"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tools/files/refresh")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.refresh({
                urls: ["urls", "urls"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("refresh (da140956)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { urls: ["urls", "urls"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/files/refresh")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.refresh({
                urls: ["urls", "urls"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("refresh (8d0ba79a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { urls: ["urls", "urls"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/files/refresh")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.file.refresh({
                urls: ["urls", "urls"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
