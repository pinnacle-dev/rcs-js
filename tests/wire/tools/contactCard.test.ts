/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("ContactCard", () => {
    test("get (dffa289f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "cc_1234567890" };
        const rawResponseBody = {
            id: "cc_1234567890",
            formattedName: "Porter",
            name: {
                familyName: "Porter",
                givenName: "Liam",
                additionalNames: ["Liam Porter"],
                honorificPrefixes: ["Mr"],
                honorificSuffixes: ["honorificSuffixes"],
            },
            nickname: ["nickname"],
            birthday: "birthday",
            addresses: [
                {
                    countryName: "countryName",
                    extendedAddress: "extendedAddress",
                    fulladdress: "fulladdress",
                    locality: "locality",
                    postalCode: "postalCode",
                    postOfficeBox: "postOfficeBox",
                    region: "region",
                    streetAddress: "streetAddress",
                    type: ["DOM"],
                },
            ],
            url: "url",
            phones: [{ type: ["PREF"], value: "value" }],
            emails: [{ type: ["PREF"], value: "value" }],
            timezone: "timezone",
            geo: { latitude: 1.1, longitude: 1.1 },
            title: "title",
            role: "role",
            organization: { name: "name", units: ["units"] },
            categories: ["categories"],
            note: "note",
            revision: "2025-08-15T18:35:42.538+00:00",
            file: { url: "https://server.pinnacle.sh//storage/v1/example", metadata: { expiresAt: "expiresAt" } },
        };
        server
            .mockEndpoint()
            .post("/tools/contact-card")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.contactCard.get({
            id: "cc_1234567890",
        });
        expect(response).toEqual({
            id: "cc_1234567890",
            formattedName: "Porter",
            name: {
                familyName: "Porter",
                givenName: "Liam",
                additionalNames: ["Liam Porter"],
                honorificPrefixes: ["Mr"],
                honorificSuffixes: ["honorificSuffixes"],
            },
            nickname: ["nickname"],
            birthday: "birthday",
            addresses: [
                {
                    countryName: "countryName",
                    extendedAddress: "extendedAddress",
                    fulladdress: "fulladdress",
                    locality: "locality",
                    postalCode: "postalCode",
                    postOfficeBox: "postOfficeBox",
                    region: "region",
                    streetAddress: "streetAddress",
                    type: ["DOM"],
                },
            ],
            url: "url",
            phones: [
                {
                    type: ["PREF"],
                    value: "value",
                },
            ],
            emails: [
                {
                    type: ["PREF"],
                    value: "value",
                },
            ],
            timezone: "timezone",
            geo: {
                latitude: 1.1,
                longitude: 1.1,
            },
            title: "title",
            role: "role",
            organization: {
                name: "name",
                units: ["units"],
            },
            categories: ["categories"],
            note: "note",
            revision: "2025-08-15T18:35:42.538+00:00",
            file: {
                url: "https://server.pinnacle.sh//storage/v1/example",
                metadata: {
                    expiresAt: "expiresAt",
                },
            },
        });
    });

    test("get (30879b7a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tools/contact-card")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.get({
                id: "id",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (bbcdbb5a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/contact-card")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.get({
                id: "id",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (ab793d2e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/contact-card")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.get({
                id: "id",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("upsert (8a9bd4bd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            id: "cc_1234567890",
            formattedName: "Jane Smith",
            name: {
                familyName: "Smith",
                givenName: "Jane",
                additionalNames: ["A."],
                honorificPrefixes: ["Dr."],
                honorificSuffixes: ["PhD"],
            },
            nickname: ["Janie"],
            birthday: "1990-02-15",
            addresses: [
                {
                    countryName: "USA",
                    extendedAddress: "Apt. 4B",
                    locality: "Anytown",
                    postalCode: "90210",
                    postOfficeBox: "PO Box 123",
                    region: "CA",
                    streetAddress: "123 Main St",
                    type: ["HOME", "PREF"],
                },
            ],
            url: "https://app.pinnacle.sh",
            phones: [{ type: ["CELL"], value: "+15551234567" }],
            emails: [{ type: ["INTERNET"], value: "jane.smith@example.com" }],
            timezone: "America/Los_Angeles",
            geo: { latitude: 34.0522, longitude: -118.2437 },
            title: "Engineer",
            role: "Developer",
            organization: { name: "Acme Co", units: ["Engineering", "R&D"] },
            categories: ["Friend", "Colleague"],
            note: "Test contact entry",
            photo: "https://fastly.picsum.photos/id/853/200/200.jpg?hmac=f4LF-tVBBnJb9PQAVEO8GCTGWgLUnxQLw44rUofE6mQ",
        };
        const rawResponseBody = { id: "cc_1234567890", downloadUrl: "https://files.short.ly/vcard/def456.vcf" };
        server
            .mockEndpoint()
            .post("/tools/contact-card/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.contactCard.upsert({
            id: "cc_1234567890",
            formattedName: "Jane Smith",
            name: {
                familyName: "Smith",
                givenName: "Jane",
                additionalNames: ["A."],
                honorificPrefixes: ["Dr."],
                honorificSuffixes: ["PhD"],
            },
            nickname: ["Janie"],
            birthday: "1990-02-15",
            addresses: [
                {
                    countryName: "USA",
                    extendedAddress: "Apt. 4B",
                    locality: "Anytown",
                    postalCode: "90210",
                    postOfficeBox: "PO Box 123",
                    region: "CA",
                    streetAddress: "123 Main St",
                    type: ["HOME", "PREF"],
                },
            ],
            url: "https://app.pinnacle.sh",
            phones: [
                {
                    type: ["CELL"],
                    value: "+15551234567",
                },
            ],
            emails: [
                {
                    type: ["INTERNET"],
                    value: "jane.smith@example.com",
                },
            ],
            timezone: "America/Los_Angeles",
            geo: {
                latitude: 34.0522,
                longitude: -118.2437,
            },
            title: "Engineer",
            role: "Developer",
            organization: {
                name: "Acme Co",
                units: ["Engineering", "R&D"],
            },
            categories: ["Friend", "Colleague"],
            note: "Test contact entry",
            photo: "https://fastly.picsum.photos/id/853/200/200.jpg?hmac=f4LF-tVBBnJb9PQAVEO8GCTGWgLUnxQLw44rUofE6mQ",
        });
        expect(response).toEqual({
            id: "cc_1234567890",
            downloadUrl: "https://files.short.ly/vcard/def456.vcf",
        });
    });

    test("upsert (7227bbf6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            photo: undefined,
            id: undefined,
            formattedName: undefined,
            name: undefined,
            nickname: undefined,
            birthday: undefined,
            addresses: undefined,
            url: undefined,
            phones: undefined,
            emails: undefined,
            timezone: undefined,
            geo: undefined,
            title: undefined,
            role: undefined,
            organization: undefined,
            categories: undefined,
            note: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tools/contact-card/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.upsert({
                photo: undefined,
                id: undefined,
                formattedName: undefined,
                name: undefined,
                nickname: undefined,
                birthday: undefined,
                addresses: undefined,
                url: undefined,
                phones: undefined,
                emails: undefined,
                timezone: undefined,
                geo: undefined,
                title: undefined,
                role: undefined,
                organization: undefined,
                categories: undefined,
                note: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("upsert (72c3456e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            photo: undefined,
            id: undefined,
            formattedName: undefined,
            name: undefined,
            nickname: undefined,
            birthday: undefined,
            addresses: undefined,
            url: undefined,
            phones: undefined,
            emails: undefined,
            timezone: undefined,
            geo: undefined,
            title: undefined,
            role: undefined,
            organization: undefined,
            categories: undefined,
            note: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/contact-card/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.upsert({
                photo: undefined,
                id: undefined,
                formattedName: undefined,
                name: undefined,
                nickname: undefined,
                birthday: undefined,
                addresses: undefined,
                url: undefined,
                phones: undefined,
                emails: undefined,
                timezone: undefined,
                geo: undefined,
                title: undefined,
                role: undefined,
                organization: undefined,
                categories: undefined,
                note: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("upsert (8de9c012)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            photo: undefined,
            id: undefined,
            formattedName: undefined,
            name: undefined,
            nickname: undefined,
            birthday: undefined,
            addresses: undefined,
            url: undefined,
            phones: undefined,
            emails: undefined,
            timezone: undefined,
            geo: undefined,
            title: undefined,
            role: undefined,
            organization: undefined,
            categories: undefined,
            note: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/tools/contact-card/upsert")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tools.contactCard.upsert({
                photo: undefined,
                id: undefined,
                formattedName: undefined,
                name: undefined,
                nickname: undefined,
                birthday: undefined,
                addresses: undefined,
                url: undefined,
                phones: undefined,
                emails: undefined,
                timezone: undefined,
                geo: undefined,
                title: undefined,
                role: undefined,
                organization: undefined,
                categories: undefined,
                note: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
