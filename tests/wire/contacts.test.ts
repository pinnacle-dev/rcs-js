/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";

describe("Contacts", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            description: "Friend from work",
            email: "alvaroope@example.com",
            id: 137,
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.contacts.get();
        expect(response).toEqual({
            description: "Friend from work",
            email: "alvaroope@example.com",
            id: 137,
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "Friend from work",
            email: "alvaroope@example.com",
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        };
        const rawResponseBody = { id: 137 };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.create({
            description: "Friend from work",
            email: "alvaroope@example.com",
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        });
        expect(response).toEqual({
            id: 137,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "Retired",
            email: "alvaroopedtech@example.com",
            id: 137,
            name: "Retired Bestie",
            tags: ["friend"],
        };
        const rawResponseBody = { id: 137 };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.update({
            description: "Retired",
            email: "alvaroopedtech@example.com",
            id: 137,
            name: "Retired Bestie",
            tags: ["friend"],
        });
        expect(response).toEqual({
            id: 137,
        });
    });
});
