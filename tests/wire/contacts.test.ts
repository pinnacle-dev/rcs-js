/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Contacts", () => {
    test("get (f01947bd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            description: "Friend from work",
            email: "alvaroope@pinnacle.sh",
            id: "co_1234567890",
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.contacts.get({
            id: "co_1234567890",
        });
        expect(response).toEqual({
            description: "Friend from work",
            email: "alvaroope@pinnacle.sh",
            id: "co_1234567890",
            name: "Alva Roope",
            phoneNumber: "+14154537890",
            tags: ["friend", "work"],
        });
    });

    test("get (57f242d1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.contacts.get();
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (2f2ae063)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.contacts.get();
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (2a52b7bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.contacts.get();
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("get (1df0272f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/contacts").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.contacts.get();
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("create (9c5ae996)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phoneNumber: "phoneNumber" };
        const rawResponseBody = { id: "co_1234567890" };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.create({
            phoneNumber: "phoneNumber",
        });
        expect(response).toEqual({
            id: "co_1234567890",
        });
    });

    test("create (755f4819)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phoneNumber: "phoneNumber",
            description: undefined,
            email: undefined,
            name: undefined,
            tags: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.create({
                phoneNumber: "phoneNumber",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (d95f6e1b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phoneNumber: "phoneNumber",
            description: undefined,
            email: undefined,
            name: undefined,
            tags: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.create({
                phoneNumber: "phoneNumber",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("create (b57920c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phoneNumber: "phoneNumber",
            description: undefined,
            email: undefined,
            name: undefined,
            tags: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.create({
                phoneNumber: "phoneNumber",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("update (157ea60d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "Retired",
            email: "alvaroopedtech@pinnacle.sh",
            name: "Retired Bestie",
            tags: ["friend"],
            id: "co_1234567890",
        };
        const rawResponseBody = { id: "co_1234567890" };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.contacts.update({
            description: "Retired",
            email: "alvaroopedtech@pinnacle.sh",
            name: "Retired Bestie",
            tags: ["friend"],
            id: "co_1234567890",
        });
        expect(response).toEqual({
            id: "co_1234567890",
        });
    });

    test("update (d6fd013)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", description: undefined, email: undefined, name: undefined, tags: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.update({
                id: "id",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (c9e72dcd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", description: undefined, email: undefined, name: undefined, tags: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.update({
                id: "id",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("update (6f3234b9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", description: undefined, email: undefined, name: undefined, tags: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.update({
                id: "id",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("update (c8fc8cb9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", description: undefined, email: undefined, name: undefined, tags: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .put("/contacts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.contacts.update({
                id: "id",
                description: undefined,
                email: undefined,
                name: undefined,
                tags: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
