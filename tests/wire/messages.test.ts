/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Messages", () => {
    test("get (SMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: { text: "Hello from Pinnacle" },
            cost: 10,
            deliveredAt: "deliveredAt",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "API",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-06-18T21:27:13.809",
            status: "PENDING",
            type: "SMS",
        };
        server
            .mockEndpoint()
            .get("/messages/msg_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.get("msg_1234567890");
        expect(response).toEqual({
            content: {
                text: "Hello from Pinnacle",
            },
            cost: 10,
            deliveredAt: "deliveredAt",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "API",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-06-18T21:27:13.809",
            status: "PENDING",
            type: "SMS",
        });
    });

    test("get (MMS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: {
                mediaUrls: ["https://agent-logos.storage.googleapis.com/_/m0bk9gvlDunZEw1krfruZmw3"],
                text: "Check out our website for more information!",
            },
            cost: 30,
            deliveredAt: "deliveredAt",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "SDK",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-08T22:05:23.291",
            status: "PENDING",
            type: "MMS",
        };
        server
            .mockEndpoint()
            .get("/messages/msg_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.get("msg_1234567890");
        expect(response).toEqual({
            content: {
                mediaUrls: ["https://agent-logos.storage.googleapis.com/_/m0bk9gvlDunZEw1krfruZmw3"],
                text: "Check out our website for more information!",
            },
            cost: 30,
            deliveredAt: "deliveredAt",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "SDK",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-08T22:05:23.291",
            status: "PENDING",
            type: "MMS",
        });
    });

    test("get (RCS Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: {
                cards: [
                    {
                        buttons: [
                            { payload: "payload", title: "title", type: "openUrl" },
                            { payload: "payload", title: "title", type: "call" },
                            {
                                eventEndTime: "eventEndTime",
                                eventStartTime: "eventStartTime",
                                eventTitle: "eventTitle",
                                title: "title",
                                type: "scheduleEvent",
                            },
                        ],
                        media: {
                            fullPath: "vault/sample-image.webp",
                            mimeType: "image/webp",
                            url: "https://example.com/media/sample-image.webp",
                        },
                        subtitle: "OpenUrl",
                        title: "See Website",
                    },
                ],
                quickReplies: [
                    { payload: "payload", title: "title", type: "openUrl" },
                    { payload: "payload", title: "title", type: "call" },
                    {
                        eventEndTime: "eventEndTime",
                        eventStartTime: "eventStartTime",
                        eventTitle: "eventTitle",
                        title: "title",
                        type: "scheduleEvent",
                    },
                ],
            },
            cost: 30,
            deliveredAt: "2025-08-05T18:51:00.591",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "OTHER",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-05T18:50:55.912",
            status: "DELIVERED",
            type: "RCS",
        };
        server
            .mockEndpoint()
            .get("/messages/msg_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.get("msg_1234567890");
        expect(response).toEqual({
            content: {
                cards: [
                    {
                        buttons: [
                            {
                                type: "openUrl",
                                payload: "payload",
                                title: "title",
                            },
                            {
                                type: "call",
                                payload: "payload",
                                title: "title",
                            },
                            {
                                type: "scheduleEvent",
                                eventEndTime: "eventEndTime",
                                eventStartTime: "eventStartTime",
                                eventTitle: "eventTitle",
                                title: "title",
                            },
                        ],
                        media: {
                            fullPath: "vault/sample-image.webp",
                            mimeType: "image/webp",
                            url: "https://example.com/media/sample-image.webp",
                        },
                        subtitle: "OpenUrl",
                        title: "See Website",
                    },
                ],
                quickReplies: [
                    {
                        type: "openUrl",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "call",
                        payload: "payload",
                        title: "title",
                    },
                    {
                        type: "scheduleEvent",
                        eventEndTime: "eventEndTime",
                        eventStartTime: "eventStartTime",
                        eventTitle: "eventTitle",
                        title: "title",
                    },
                ],
            },
            cost: 30,
            deliveredAt: "2025-08-05T18:51:00.591",
            error: '{"message": "Error: Timeout occurred"}',
            id: "msg_1234567890",
            method: "OTHER",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-05T18:50:55.912",
            status: "DELIVERED",
            type: "RCS",
        });
    });

    test("get (Inbound Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: { data: { address: "address", latitude: 1.1, longitude: 1.1, text: "text" } },
            cost: 30,
            deliveredAt: "2025-08-05T18:51:00.591",
            error: '{"value":[]}',
            id: "msg_1234567890",
            method: "OTHER",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-05T18:50:55.912",
            status: "DELIVERED",
            type: "RCS",
        };
        server
            .mockEndpoint()
            .get("/messages/msg_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.get("msg_1234567890");
        expect(response).toEqual({
            content: {
                data: {
                    address: "address",
                    latitude: 1.1,
                    longitude: 1.1,
                    text: "text",
                },
            },
            cost: 30,
            deliveredAt: "2025-08-05T18:51:00.591",
            error: '{"value":[]}',
            id: "msg_1234567890",
            method: "OTHER",
            numSegments: 1,
            receiver: "+1415654321",
            sender: "+1415567890",
            sentAt: "2025-08-05T18:50:55.912",
            status: "DELIVERED",
            type: "RCS",
        });
    });

    test("get (d8ed2e53)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/messages/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.messages.get("id");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (8d3a7c8d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/messages/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.messages.get("id");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (d851f5ff)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/messages/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.messages.get("id");
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (f1cf1379)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/messages/id").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.messages.get("id");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("react (b42f7c29)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "msg_1234567890", options: { force: true }, reaction: "👍" };
        const rawResponseBody = { messageId: "msg_1234567890", reactionMessageId: "msg_1234567890" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.messages.react({
            messageId: "msg_1234567890",
            options: {
                force: true,
            },
            reaction: "\uD83D\uDC4D",
        });
        expect(response).toEqual({
            messageId: "msg_1234567890",
            reactionMessageId: "msg_1234567890",
        });
    });

    test("react (85bed033)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("react (70bd94ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("react (51671bbd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("react (2eb4255f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("react (4f55e099)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("react (a3814349)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messageId: "messageId", options: undefined, reaction: null };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/messages/react")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.messages.react({
                messageId: "messageId",
                options: undefined,
                reaction: null,
            });
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
