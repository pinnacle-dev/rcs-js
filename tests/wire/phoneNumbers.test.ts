/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("PhoneNumbers", () => {
    test("search (14c0f78f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            features: ["SMS", "MMS"],
            location: { city: "New York", nationalDestinationCode: "212" },
            number: { contains: "514", startsWith: "45" },
            options: { limit: 4 },
            type: ["LOCAL"],
        };
        const rawResponseBody = [
            {
                number: "+13324557514",
                phone_type: "LOCAL",
                cost: { monthly: 1.15, upfront: 1.15, currency: "USD" },
                features: ["HD_VOICE", "VOICE", "EMERGENCY", "FAX", "MMS", "SMS"],
                region: { country: "US", state: "NY", city: "NEW YORK CITY", rateCenter: "NEW YORK CITY ZONE 01" },
            },
        ];
        server
            .mockEndpoint()
            .post("/phone-numbers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.search({
            features: ["SMS", "MMS"],
            location: {
                city: "New York",
                nationalDestinationCode: "212",
            },
            number: {
                contains: "514",
                startsWith: "45",
            },
            options: {
                limit: 4,
            },
            type: ["LOCAL"],
        });
        expect(response).toEqual([
            {
                number: "+13324557514",
                phone_type: "LOCAL",
                cost: {
                    monthly: 1.15,
                    upfront: 1.15,
                    currency: "USD",
                },
                features: ["HD_VOICE", "VOICE", "EMERGENCY", "FAX", "MMS", "SMS"],
                region: {
                    country: "US",
                    state: "NY",
                    city: "NEW YORK CITY",
                    rateCenter: "NEW YORK CITY ZONE 01",
                },
            },
        ]);
    });

    test("search (21f5dd32)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            features: undefined,
            location: undefined,
            number: undefined,
            options: undefined,
            type: ["LOCAL", "LOCAL"],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.search({
                features: undefined,
                location: undefined,
                number: undefined,
                options: undefined,
                type: ["LOCAL", "LOCAL"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("search (bb018082)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            features: undefined,
            location: undefined,
            number: undefined,
            options: undefined,
            type: ["LOCAL", "LOCAL"],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.search({
                features: undefined,
                location: undefined,
                number: undefined,
                options: undefined,
                type: ["LOCAL", "LOCAL"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("search (aebd7db6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            features: undefined,
            location: undefined,
            number: undefined,
            options: undefined,
            type: ["LOCAL", "LOCAL"],
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.search({
                features: undefined,
                location: undefined,
                number: undefined,
                options: undefined,
                type: ["LOCAL", "LOCAL"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("buy (7974fbda)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["+18559491727"] };
        const rawResponseBody = [{ number: "+18559491727", capabilities: { sms: true, mms: true, voice: true } }];
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.buy({
            numbers: ["+18559491727"],
        });
        expect(response).toEqual([
            {
                number: "+18559491727",
                capabilities: {
                    sms: true,
                    mms: true,
                    voice: true,
                },
            },
        ]);
    });

    test("buy (218b6f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["numbers", "numbers"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.buy({
                numbers: ["numbers", "numbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("buy (6b62d630)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["numbers", "numbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.buy({
                numbers: ["numbers", "numbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("buy (7097c090)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["numbers", "numbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.buy({
                numbers: ["numbers", "numbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("buy (d3cbaf64)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["numbers", "numbers"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.buy({
                numbers: ["numbers", "numbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("buy (9538d3c4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["numbers", "numbers"] };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.buy({
                numbers: ["numbers", "numbers"],
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("get (Successful Basic Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: { context: "This is my friend from JZ. He has done a lot in the crypto space." },
            },
        };
        const rawResponseBody = {
            isValid: true,
            type: "LANDLINE",
            formats: { international: "international", national: "national", raw: "raw" },
            location: { country: { code: "code", name: "name", prefix: "prefix" }, place: "place" },
            carrier: "carrier",
            contact: { name: "name" },
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.get({
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: {
                    context: "This is my friend from JZ. He has done a lot in the crypto space.",
                },
            },
        });
        expect(response).toEqual({
            isValid: true,
            type: "LANDLINE",
            formats: {
                international: "international",
                national: "national",
                raw: "raw",
            },
            location: {
                country: {
                    code: "code",
                    name: "name",
                    prefix: "prefix",
                },
                place: "place",
            },
            carrier: "carrier",
            contact: {
                name: "name",
            },
        });
    });

    test("get (Successful Advanced Response)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: { context: "This is my friend from JZ. He has done a lot in the crypto space." },
            },
        };
        const rawResponseBody = {
            isValid: true,
            type: "LANDLINE",
            formats: { international: "international", national: "national", raw: "raw" },
            location: { country: { code: "code", name: "name", prefix: "prefix" }, place: "place" },
            carrier: "carrier",
            contact: { name: "name" },
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.get({
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: {
                    context: "This is my friend from JZ. He has done a lot in the crypto space.",
                },
            },
        });
        expect(response).toEqual({
            isValid: true,
            type: "LANDLINE",
            formats: {
                international: "international",
                national: "national",
                raw: "raw",
            },
            location: {
                country: {
                    code: "code",
                    name: "name",
                    prefix: "prefix",
                },
                place: "place",
            },
            carrier: "carrier",
            contact: {
                name: "name",
            },
        });
    });

    test("get (8599afe5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phone: "phone", level: "basic", options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.get({
                phone: "phone",
                level: "basic",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (c0c9dd8f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phone: "phone", level: "basic", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.get({
                phone: "phone",
                level: "basic",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (3aa4008f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phone: "phone", level: "basic", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.get({
                phone: "phone",
                level: "basic",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.PaymentRequiredError({
                error: "error",
            }),
        );
    });

    test("get (b28e67e1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phone: "phone", level: "basic", options: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.get({
                phone: "phone",
                level: "basic",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (c9e1c2eb)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { phone: "phone", level: "basic", options: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.phoneNumbers.get({
                phone: "phone",
                level: "basic",
                options: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
