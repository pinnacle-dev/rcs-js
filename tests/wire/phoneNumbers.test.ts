/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";

describe("PhoneNumbers", () => {
    test("search", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            features: ["SMS", "MMS"],
            location: { city: "New York", nationalDestinationCode: "212" },
            number: { contains: "514", startsWith: "45" },
            options: { limit: 4 },
            type: ["LOCAL"],
        };
        const rawResponseBody = [
            {
                number: "+13324557514",
                phone_type: "LOCAL",
                cost: { monthly: 1.15, upfront: 1.15, currency: "USD" },
                features: ["HD_VOICE", "VOICE", "EMERGENCY", "FAX", "MMS", "SMS"],
                region: { country: "US", state: "NY", city: "NEW YORK CITY", rateCenter: "NEW YORK CITY ZONE 01" },
            },
        ];
        server
            .mockEndpoint()
            .post("/phone-numbers/search")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.search({
            features: ["SMS", "MMS"],
            location: {
                city: "New York",
                nationalDestinationCode: "212",
            },
            number: {
                contains: "514",
                startsWith: "45",
            },
            options: {
                limit: 4,
            },
            type: ["LOCAL"],
        });
        expect(response).toEqual([
            {
                number: "+13324557514",
                phone_type: "LOCAL",
                cost: {
                    monthly: 1.15,
                    upfront: 1.15,
                    currency: "USD",
                },
                features: ["HD_VOICE", "VOICE", "EMERGENCY", "FAX", "MMS", "SMS"],
                region: {
                    country: "US",
                    state: "NY",
                    city: "NEW YORK CITY",
                    rateCenter: "NEW YORK CITY ZONE 01",
                },
            },
        ]);
    });

    test("buy", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { numbers: ["+18559491727"] };
        const rawResponseBody = [{ number: "+18559491727", capabilities: { sms: true, mms: true, voice: true } }];
        server
            .mockEndpoint()
            .post("/phone-numbers/buy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.buy({
            numbers: ["+18559491727"],
        });
        expect(response).toEqual([
            {
                number: "+18559491727",
                capabilities: {
                    sms: true,
                    mms: true,
                    voice: true,
                },
            },
        ]);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: { context: "This is my friend from JZ. He has done a lot in the crypto space." },
            },
        };
        const rawResponseBody = {
            isValid: true,
            type: "LANDLINE",
            formats: { international: "international", national: "national", raw: "raw" },
            location: { country: { code: "code", name: "name", prefix: "prefix" }, place: "place" },
            carrier: "carrier",
            contact: { name: "name" },
        };
        server
            .mockEndpoint()
            .post("/phone-numbers/details")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.phoneNumbers.get({
            phone: "+11234567890",
            level: "advanced",
            options: {
                risk: true,
                enhanced_contact_info: {
                    context: "This is my friend from JZ. He has done a lot in the crypto space.",
                },
            },
        });
        expect(response).toEqual({
            isValid: true,
            type: "LANDLINE",
            formats: {
                international: "international",
                national: "national",
                raw: "raw",
            },
            location: {
                country: {
                    code: "code",
                    name: "name",
                    prefix: "prefix",
                },
                place: "place",
            },
            carrier: "carrier",
            contact: {
                name: "name",
            },
        });
    });
});
