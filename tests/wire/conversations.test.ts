/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Conversations", () => {
    test("get (91a9d8d4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "conv_1234567890" };
        const rawResponseBody = {
            brandId: "b_1234567890",
            campaign: { id: "tf_1234567890", type: "TOLL_FREE" },
            contact: { id: "co_1234567890", phoneNumber: "+16509231662" },
            createdAt: "2024-09-11T00:05:29.434",
            id: "conv_1234567890",
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: { mms: true, sms: true, voice: true },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40.237",
        };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.get({
            id: "conv_1234567890",
        });
        expect(response).toEqual({
            brandId: "b_1234567890",
            campaign: {
                id: "tf_1234567890",
                type: "TOLL_FREE",
            },
            contact: {
                id: "co_1234567890",
                phoneNumber: "+16509231662",
            },
            createdAt: "2024-09-11T00:05:29.434",
            id: "conv_1234567890",
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: {
                    mms: true,
                    sms: true,
                    voice: true,
                },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40.237",
        });
    });

    test("get (d340acbc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: "id",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (482a9854)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: "id",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (74176648)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: "id",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("list (6f7a74ba)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: "b_1234567890",
            campaignId: "tf_1234567890",
            campaignType: "TOLL_FREE",
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        };
        const rawResponseBody = {
            count: 50,
            conversations: [
                {
                    brandId: "b_1234567890",
                    campaign: { id: "dlc_1234567890", type: "10DLC" },
                    contact: { id: "co_1234567890", phoneNumber: "+16509231662" },
                    createdAt: "2024-09-11T00:05:29.434",
                    id: "conv_1234567890",
                    notes: "VIP customer",
                    sender: {
                        capabilities: { mms: true, sms: true, voice: false },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40.237",
                },
            ],
            hasMore: true,
        };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.list({
            brandId: "b_1234567890",
            campaignId: "tf_1234567890",
            campaignType: "TOLL_FREE",
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        });
        expect(response).toEqual({
            count: 50,
            conversations: [
                {
                    brandId: "b_1234567890",
                    campaign: {
                        id: "dlc_1234567890",
                        type: "10DLC",
                    },
                    contact: {
                        id: "co_1234567890",
                        phoneNumber: "+16509231662",
                    },
                    createdAt: "2024-09-11T00:05:29.434",
                    id: "conv_1234567890",
                    notes: "VIP customer",
                    sender: {
                        capabilities: {
                            mms: true,
                            sms: true,
                            voice: false,
                        },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40.237",
                },
            ],
            hasMore: true,
        });
    });

    test("list (33cc83a8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (f9f87f8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("list (62d488c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("update (a26ace86)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            id: "conv_1234567890",
            notes: "Follow-up completed. Customer satisfied with resolution.",
        };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.update({
            id: "conv_1234567890",
            notes: "Follow-up completed. Customer satisfied with resolution.",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (39fece6f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", notes: "x" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: "id",
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (f840ea61)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", notes: "x" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: "id",
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("update (46a054ed)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: "id", notes: "x" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: "id",
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("listMessages (7bfa8558)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            messages: [
                {
                    content: { text: "Hello, how can I help you today?" },
                    cost: 0.0075,
                    deliveredAt: "2024-09-11T00:05:30.123Z",
                    error: "error",
                    id: "msg_1234567890",
                    method: "API",
                    numSegments: 1,
                    receiver: "+16509231662",
                    sender: "+18445551234",
                    sentAt: "2024-09-11T00:05:29.434Z",
                    status: "DELIVERED",
                    type: "SMS",
                    direction: "OUTBOUND",
                    reaction: "reaction",
                },
                {
                    content: { text: "I need help with my order" },
                    cost: 1.1,
                    deliveredAt: "2024-09-11T00:10:16.123Z",
                    error: "error",
                    id: "msg_0987654321",
                    method: "API",
                    numSegments: 1,
                    receiver: "+18445551234",
                    sender: "+16509231662",
                    sentAt: "2024-09-11T00:10:15.234Z",
                    status: "DELIVERED",
                    type: "SMS",
                    direction: "INBOUND",
                    reaction: "👍",
                },
            ],
            hasMore: true,
            count: 42,
        };
        server
            .mockEndpoint()
            .post("/conversations/id/messages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.listMessages("id");
        expect(response).toEqual({
            messages: [
                {
                    content: {
                        text: "Hello, how can I help you today?",
                    },
                    cost: 0.0075,
                    deliveredAt: "2024-09-11T00:05:30.123Z",
                    error: "error",
                    id: "msg_1234567890",
                    method: "API",
                    numSegments: 1,
                    receiver: "+16509231662",
                    sender: "+18445551234",
                    sentAt: "2024-09-11T00:05:29.434Z",
                    status: "DELIVERED",
                    type: "SMS",
                    direction: "OUTBOUND",
                    reaction: "reaction",
                },
                {
                    content: {
                        text: "I need help with my order",
                    },
                    cost: 1.1,
                    deliveredAt: "2024-09-11T00:10:16.123Z",
                    error: "error",
                    id: "msg_0987654321",
                    method: "API",
                    numSegments: 1,
                    receiver: "+18445551234",
                    sender: "+16509231662",
                    sentAt: "2024-09-11T00:10:15.234Z",
                    status: "DELIVERED",
                    type: "SMS",
                    direction: "INBOUND",
                    reaction: "\uD83D\uDC4D",
                },
            ],
            hasMore: true,
            count: 42,
        });
    });

    test("listMessages (d8ed2e53)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/id/messages")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.listMessages("id");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("listMessages (8d3a7c8d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/id/messages")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.listMessages("id");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("listMessages (d851f5ff)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/id/messages")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.listMessages("id");
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("listMessages (f1cf1379)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/id/messages")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.listMessages("id");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
