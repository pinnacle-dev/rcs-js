/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";
import * as Pinnacle from "../../src/api/index";

describe("Conversations", () => {
    test("get (820583fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1 };
        const rawResponseBody = {
            brandId: 119,
            campaign: { id: "136", type: "TOLL_FREE" },
            contact: { id: 70, phoneNumber: "+16509231662" },
            createdAt: "2024-09-11T00:05:29.434",
            id: 1,
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: { mms: true, sms: true, voice: true },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40.237",
        };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.get({
            id: 1,
        });
        expect(response).toEqual({
            brandId: 119,
            campaign: {
                id: "136",
                type: "TOLL_FREE",
            },
            contact: {
                id: 70,
                phoneNumber: "+16509231662",
            },
            createdAt: "2024-09-11T00:05:29.434",
            id: 1,
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: {
                    mms: true,
                    sms: true,
                    voice: true,
                },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40.237",
        });
    });

    test("get (377bc6f2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1 };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (2a3ee00c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (7a09e7c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.get({
                id: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("list (a0abc8ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: 101,
            campaignId: 136,
            campaignType: "TOLL_FREE",
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        };
        const rawResponseBody = {
            count: 50,
            conversations: [
                {
                    brandId: 119,
                    campaign: { id: "245", type: "10DLC" },
                    contact: { id: 70, phoneNumber: "+16509231662" },
                    createdAt: "2024-09-11T00:05:29.434",
                    id: 1,
                    notes: "VIP customer",
                    sender: {
                        capabilities: { mms: true, sms: true, voice: false },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40.237",
                },
            ],
            hasMore: true,
        };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.list({
            brandId: 101,
            campaignId: 136,
            campaignType: "TOLL_FREE",
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        });
        expect(response).toEqual({
            count: 50,
            conversations: [
                {
                    brandId: 119,
                    campaign: {
                        id: "245",
                        type: "10DLC",
                    },
                    contact: {
                        id: 70,
                        phoneNumber: "+16509231662",
                    },
                    createdAt: "2024-09-11T00:05:29.434",
                    id: 1,
                    notes: "VIP customer",
                    sender: {
                        capabilities: {
                            mms: true,
                            sms: true,
                            voice: false,
                        },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40.237",
                },
            ],
            hasMore: true,
        });
    });

    test("list (bf72a02d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (a879666d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("list (30960759)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: undefined,
            campaignId: undefined,
            campaignType: undefined,
            pageIndex: 1,
            pageSize: undefined,
            receiver: undefined,
            sender: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.list({
                brandId: undefined,
                campaignId: undefined,
                campaignType: undefined,
                pageIndex: 1,
                pageSize: undefined,
                receiver: undefined,
                sender: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("update (5aa8565c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 123, notes: "Follow-up completed. Customer satisfied with resolution." };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.update({
            id: 123,
            notes: "Follow-up completed. Customer satisfied with resolution.",
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("update (7c07aeb9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1, notes: "x" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: 1,
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (c3f0ee61)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1, notes: "x" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: 1,
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("update (aff5d8ed)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1, notes: "x" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversations.update({
                id: 1,
                notes: "x",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
