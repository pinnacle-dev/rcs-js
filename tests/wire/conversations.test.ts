/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { PinnacleClient } from "../../src/Client";

describe("Conversations", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 1 };
        const rawResponseBody = {
            brandId: 119,
            campaign: { id: "136", type: "TOLL_FREE" },
            contact: { id: 70, phoneNumber: "+16509231662" },
            createdAt: "2024-09-11T00:05:29Z",
            id: 1,
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: { MMS: true, SMS: true, voice: true },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40Z",
        };
        server
            .mockEndpoint()
            .post("/conversations/get")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.get({
            id: 1,
        });
        expect(response).toEqual({
            brandId: 119,
            campaign: {
                id: "136",
                type: "TOLL_FREE",
            },
            contact: {
                id: 70,
                phoneNumber: "+16509231662",
            },
            createdAt: "2024-09-11T00:05:29Z",
            id: 1,
            notes: "Customer inquired about product availability",
            sender: {
                capabilities: {
                    MMS: true,
                    SMS: true,
                    voice: true,
                },
                createdAt: "2024-01-15T09:30:00Z",
                isSandbox: false,
                phoneNumber: "+18445551234",
                updatedAt: "2024-01-15T09:30:00Z",
            },
            updatedAt: "2024-08-14T14:19:40Z",
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brandId: 101,
            campaignId: 136,
            campaignType: { id: "136", type: "TOLL_FREE" },
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        };
        const rawResponseBody = {
            count: 50,
            conversations: [
                {
                    brandId: 119,
                    campaign: { id: "245", type: "10DLC" },
                    contact: { id: 70, phoneNumber: "+16509231662" },
                    createdAt: "2024-09-11T00:05:29Z",
                    id: 1,
                    notes: "VIP customer",
                    sender: {
                        capabilities: { MMS: true, SMS: true, voice: false },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40Z",
                },
            ],
            hasMore: true,
        };
        server
            .mockEndpoint()
            .post("/conversations/list")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.list({
            brandId: 101,
            campaignId: 136,
            campaignType: {
                id: "136",
                type: "TOLL_FREE",
            },
            pageIndex: 0,
            pageSize: 20,
            receiver: "+16509231662",
            sender: "+18445551234",
        });
        expect(response).toEqual({
            count: 50,
            conversations: [
                {
                    brandId: 119,
                    campaign: {
                        id: "245",
                        type: "10DLC",
                    },
                    contact: {
                        id: 70,
                        phoneNumber: "+16509231662",
                    },
                    createdAt: "2024-09-11T00:05:29Z",
                    id: 1,
                    notes: "VIP customer",
                    sender: {
                        capabilities: {
                            MMS: true,
                            SMS: true,
                            voice: false,
                        },
                        createdAt: "2024-01-15T09:30:00Z",
                        isSandbox: false,
                        phoneNumber: "+18445551234",
                        updatedAt: "2024-01-15T09:30:00Z",
                    },
                    updatedAt: "2024-08-14T14:19:40Z",
                },
            ],
            hasMore: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { id: 123, notes: "Follow-up completed. Customer satisfied with resolution." };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/conversations/update")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversations.update({
            id: 123,
            notes: "Follow-up completed. Customer satisfied with resolution.",
        });
        expect(response).toEqual({
            success: true,
        });
    });
});
