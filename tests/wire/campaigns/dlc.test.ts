/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Dlc", () => {
    test("autofill (75ebd13b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additionalInfo: "Please autofill missing DLC campaign fields using my brand profile",
            campaignId: 161,
        };
        const rawResponseBody = {
            autoRenew: true,
            brand: 1,
            campaignId: 161,
            description: "description",
            keywords: {
                HELP: { message: "Reply HELP for assistance, STOP to opt-out", values: ["HELP", "INFO", "SUPPORT"] },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            useCase: { sub: ["FRAUD_ALERT"], value: "ACCOUNT_NOTIFICATION" },
        };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.dlc.autofill({
            additionalInfo: "Please autofill missing DLC campaign fields using my brand profile",
            campaignId: 161,
        });
        expect(response).toEqual({
            autoRenew: true,
            brand: 1,
            campaignId: 161,
            description: "description",
            keywords: {
                HELP: {
                    message: "Reply HELP for assistance, STOP to opt-out",
                    values: ["HELP", "INFO", "SUPPORT"],
                },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            useCase: {
                sub: ["FRAUD_ALERT"],
                value: "ACCOUNT_NOTIFICATION",
            },
        });
    });

    test("autofill (d5360f26)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("autofill (772a13bd)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("autofill (17e040a9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("get (f0df71fc)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            autoRenew: false,
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: 2,
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            campaignId: 28,
            description: "description",
            keywords: {
                HELP: {
                    message: "For assistance, visit https://www.pinnacle.sh/ or email founders@trypinnacle.app.",
                    values: ["HELP", "SUPPORT", "ASSIST"],
                },
                OPT_IN: {
                    message: "You're now subscribed to Pinnacle. Reply STOP, UNSUBSCRIBE, or END to unsubscribe.",
                    values: ["YES", "SUBSCRIBE", "START"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed from Pinnacle. Reply START, SUBSCRIBE, or YES to resubscribe.",
                    values: ["STOP", "UNSUBSCRIBE", "END"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "User will subscribe to newsletter through the website.",
            name: "Pinnacle",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "embeddedLink",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Hello from Pinnacle.", "To get started visit https://www.pinnacle.sh/"],
            status: "VERIFIED",
            useCase: { value: "LOW_VOLUME" },
        };
        server.mockEndpoint().get("/campaigns/dlc/28").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.campaigns.dlc.get(28);
        expect(response).toEqual({
            autoRenew: false,
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: 2,
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            campaignId: 28,
            description: "description",
            keywords: {
                HELP: {
                    message: "For assistance, visit https://www.pinnacle.sh/ or email founders@trypinnacle.app.",
                    values: ["HELP", "SUPPORT", "ASSIST"],
                },
                OPT_IN: {
                    message: "You're now subscribed to Pinnacle. Reply STOP, UNSUBSCRIBE, or END to unsubscribe.",
                    values: ["YES", "SUBSCRIBE", "START"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed from Pinnacle. Reply START, SUBSCRIBE, or YES to resubscribe.",
                    values: ["STOP", "UNSUBSCRIBE", "END"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "User will subscribe to newsletter through the website.",
            name: "Pinnacle",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "embeddedLink",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Hello from Pinnacle.", "To get started visit https://www.pinnacle.sh/"],
            status: "VERIFIED",
            useCase: {
                value: "LOW_VOLUME",
            },
        });
    });

    test("get (eecd4f52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/campaigns/dlc/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.campaigns.dlc.get(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (c9fc51d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/campaigns/dlc/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.campaigns.dlc.get(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (84cc0bc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/campaigns/dlc/1").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.campaigns.dlc.get(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("get (eba86205)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/campaigns/dlc/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.campaigns.dlc.get(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("submit (3c06af76)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/submit/161")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.dlc.submit(161);
        expect(response).toEqual({
            success: true,
        });
    });

    test("submit (eecd4f52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/submit/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.submit(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("submit (c9fc51d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/submit/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.submit(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("submit (84cc0bc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/submit/1")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.submit(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("submit (eba86205)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/submit/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.submit(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("upsert (914fcb0d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            autoRenew: true,
            brand: 1,
            campaignId: 161,
            keywords: {
                HELP: { message: "Reply HELP for assistance, STOP to opt-out", values: ["HELP", "INFO", "SUPPORT"] },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            useCase: { sub: ["FRAUD_ALERT"], value: "ACCOUNT_NOTIFICATION" },
        };
        const rawResponseBody = {
            autoRenew: true,
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "john.smith@pinnacle.example",
                    name: "John Smith",
                    phone: "+14151891244",
                    title: "Communications Manager",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: 1,
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-10T07:58:01.291",
            },
            campaignId: 161,
            description: "description",
            keywords: {
                HELP: { message: "Reply HELP for assistance, STOP to opt-out", values: ["HELP", "INFO", "SUPPORT"] },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            status: "VERIFIED",
            useCase: { sub: ["FRAUD_ALERT"], value: "ACCOUNT_NOTIFICATION" },
        };
        server
            .mockEndpoint()
            .post("/campaigns/dlc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.dlc.upsert({
            autoRenew: true,
            brand: 1,
            campaignId: 161,
            keywords: {
                HELP: {
                    message: "Reply HELP for assistance, STOP to opt-out",
                    values: ["HELP", "INFO", "SUPPORT"],
                },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            useCase: {
                sub: ["FRAUD_ALERT"],
                value: "ACCOUNT_NOTIFICATION",
            },
        });
        expect(response).toEqual({
            autoRenew: true,
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "john.smith@pinnacle.example",
                    name: "John Smith",
                    phone: "+14151891244",
                    title: "Communications Manager",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: 1,
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-10T07:58:01.291",
            },
            campaignId: 161,
            description: "description",
            keywords: {
                HELP: {
                    message: "Reply HELP for assistance, STOP to opt-out",
                    values: ["HELP", "INFO", "SUPPORT"],
                },
                OPT_IN: {
                    message: "Welcome! You're now subscribed to Pinnacle.",
                    values: ["JOIN", "START", "SUBSCRIBE"],
                },
                OPT_OUT: {
                    message: "You've been unsubscribed. Reply START to rejoin.",
                    values: ["STOP", "QUIT", "UNSUBSCRIBE"],
                },
            },
            links: {
                privacyPolicy: "https://www.pinnacle.sh/privacy",
                termsOfService: "https://www.pinnacle.sh/terms",
            },
            messageFlow: "Customer initiates -> Automated response -> Agent follow-up if needed",
            name: "Account Notifications",
            options: {
                affiliateMarketing: false,
                ageGated: false,
                directLending: false,
                embeddedLink: "https://www.pinnacle.sh/example",
                embeddedPhone: false,
                numberPooling: false,
            },
            sampleMessages: ["Security alert: Unusual login detected from new device."],
            status: "VERIFIED",
            useCase: {
                sub: ["FRAUD_ALERT"],
                value: "ACCOUNT_NOTIFICATION",
            },
        });
    });

    test("upsert (1929a4ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            autoRenew: undefined,
            brand: undefined,
            campaignId: undefined,
            description: undefined,
            keywords: undefined,
            links: undefined,
            messageFlow: undefined,
            name: undefined,
            options: undefined,
            sampleMessages: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.upsert({
                autoRenew: undefined,
                brand: undefined,
                campaignId: undefined,
                description: undefined,
                keywords: undefined,
                links: undefined,
                messageFlow: undefined,
                name: undefined,
                options: undefined,
                sampleMessages: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("upsert (de0d4f35)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            autoRenew: undefined,
            brand: undefined,
            campaignId: undefined,
            description: undefined,
            keywords: undefined,
            links: undefined,
            messageFlow: undefined,
            name: undefined,
            options: undefined,
            sampleMessages: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.upsert({
                autoRenew: undefined,
                brand: undefined,
                campaignId: undefined,
                description: undefined,
                keywords: undefined,
                links: undefined,
                messageFlow: undefined,
                name: undefined,
                options: undefined,
                sampleMessages: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("upsert (99a12681)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            autoRenew: undefined,
            brand: undefined,
            campaignId: undefined,
            description: undefined,
            keywords: undefined,
            links: undefined,
            messageFlow: undefined,
            name: undefined,
            options: undefined,
            sampleMessages: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.upsert({
                autoRenew: undefined,
                brand: undefined,
                campaignId: undefined,
                description: undefined,
                keywords: undefined,
                links: undefined,
                messageFlow: undefined,
                name: undefined,
                options: undefined,
                sampleMessages: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("upsert (4ef5dfc1)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            autoRenew: undefined,
            brand: undefined,
            campaignId: undefined,
            description: undefined,
            keywords: undefined,
            links: undefined,
            messageFlow: undefined,
            name: undefined,
            options: undefined,
            sampleMessages: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.upsert({
                autoRenew: undefined,
                brand: undefined,
                campaignId: undefined,
                description: undefined,
                keywords: undefined,
                links: undefined,
                messageFlow: undefined,
                name: undefined,
                options: undefined,
                sampleMessages: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("validate (4f46db2a)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additionalInfo: "Please validate this DLC campaign for 10DLC compliance",
            campaignId: 161,
        };
        const rawResponseBody = {
            errors: [{ description: "description", example: "example", field: "field" }],
            is_valid: true,
        };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.dlc.validate({
            additionalInfo: "Please validate this DLC campaign for 10DLC compliance",
            campaignId: 161,
        });
        expect(response).toEqual({
            errors: [
                {
                    description: "description",
                    example: "example",
                    field: "field",
                },
            ],
            is_valid: true,
        });
    });

    test("validate (6dfec3cf)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: 1 };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.validate({
                additionalInfo: undefined,
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (82beebc6)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.validate({
                additionalInfo: undefined,
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (df0dffca)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: 1 };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/dlc/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.dlc.validate({
                additionalInfo: undefined,
                campaignId: 1,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
