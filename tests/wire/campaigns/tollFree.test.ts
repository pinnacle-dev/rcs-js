/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("TollFree", () => {
    test("autofill (4aba9322)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additionalInfo: "Please autofill missing campaign fields using my brand profile",
            campaignId: "dlc_1234567890",
        };
        const rawResponseBody = {
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: { summary: "Alerts clients about any Pinnacle hosted workshops.", value: "WORKSHOP_ALERTS" },
            brand: "b_1234567890",
        };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.tollFree.autofill({
            additionalInfo: "Please autofill missing campaign fields using my brand profile",
            campaignId: "dlc_1234567890",
        });
        expect(response).toEqual({
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: {
                summary: "Alerts clients about any Pinnacle hosted workshops.",
                value: "WORKSHOP_ALERTS",
            },
            brand: "b_1234567890",
        });
    });

    test("autofill (be0b4ff4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("autofill (5a2ba21c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("autofill (78086810)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: undefined };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/autofill")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.autofill({
                additionalInfo: undefined,
                campaignId: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("get (7e60e6e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: { summary: "Alerts clients about any Pinnacle hosted workshops.", value: "WORKSHOP_ALERTS" },
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: "b_1234567890",
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            status: "VERIFIED",
        };
        server
            .mockEndpoint()
            .get("/campaigns/toll-free/tf_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.tollFree.get("tf_1234567890");
        expect(response).toEqual({
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: {
                summary: "Alerts clients about any Pinnacle hosted workshops.",
                value: "WORKSHOP_ALERTS",
            },
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: "b_1234567890",
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            status: "VERIFIED",
        });
    });

    test("get (c8293015)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/campaigns/toll-free/campaignId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.get("campaignId");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (2a5bbc1f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/campaigns/toll-free/campaignId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.get("campaignId");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("get (9792c291)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/campaigns/toll-free/campaignId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.get("campaignId");
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (a63b9e7b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/campaigns/toll-free/campaignId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.get("campaignId");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("submit (b8ca1922)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/submit/tf_1234567890")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.tollFree.submit("tf_1234567890");
        expect(response).toEqual({
            success: true,
        });
    });

    test("submit (c8293015)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/submit/campaignId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.submit("campaignId");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("submit (2a5bbc1f)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/submit/campaignId")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.submit("campaignId");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("submit (9792c291)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/submit/campaignId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.submit("campaignId");
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("submit (a63b9e7b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/submit/campaignId")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.submit("campaignId");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("upsert (4807ccb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brand: "b_1234567890",
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join the Pinnacle workshop tomorrow and send your first RCS!",
            useCase: { summary: "Alerts clients about any Pinnacle hosted workshops.", value: "WORKSHOP_ALERTS" },
        };
        const rawResponseBody = {
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: { summary: "Alerts clients about any Pinnacle hosted workshops.", value: "WORKSHOP_ALERTS" },
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: "b_1234567890",
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            status: "VERIFIED",
        };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.tollFree.upsert({
            brand: "b_1234567890",
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join the Pinnacle workshop tomorrow and send your first RCS!",
            useCase: {
                summary: "Alerts clients about any Pinnacle hosted workshops.",
                value: "WORKSHOP_ALERTS",
            },
        });
        expect(response).toEqual({
            campaignId: "tf_1234567890",
            monthlyVolume: "1,000",
            name: "Pinnacle",
            optIn: {
                method: "DIGITAL",
                url: "https://www.pinnacle.sh/",
                workflowDescription: "Visit https://www.pinnacle.sh/",
            },
            productionMessageContent: "Join Pinnacle's workshop tomorrow and send your first RCS!",
            useCase: {
                summary: "Alerts clients about any Pinnacle hosted workshops.",
                value: "WORKSHOP_ALERTS",
            },
            brand: {
                address: "500 Folsom Street, San Francisco, CA 94105",
                contact: {
                    email: "janedoe1@pinnacle.example",
                    name: "Jane Doe",
                    phone: "+14155550123",
                    title: "Customer Support Specialist",
                },
                dba: "Pinnacle RCS",
                description: "description",
                ein: "12-3456789",
                email: "founders@trypinnacle.app",
                name: "Pinnacle",
                sector: "TECHNOLOGY",
                type: "PRIVATE_PROFIT",
                website: "https://www.pinnacle.sh/",
                createdAt: "2024-08-17T08:00:30.632",
                id: "b_1234567890",
                isArchived: false,
                status: "VERIFIED",
                updatedAt: "2024-12-09T10:03:54.934",
            },
            status: "VERIFIED",
        });
    });

    test("upsert (24488f6b)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brand: undefined,
            campaignId: undefined,
            monthlyVolume: undefined,
            name: undefined,
            optIn: undefined,
            productionMessageContent: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.upsert({
                brand: undefined,
                campaignId: undefined,
                monthlyVolume: undefined,
                name: undefined,
                optIn: undefined,
                productionMessageContent: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("upsert (65b2c1f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brand: undefined,
            campaignId: undefined,
            monthlyVolume: undefined,
            name: undefined,
            optIn: undefined,
            productionMessageContent: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.upsert({
                brand: undefined,
                campaignId: undefined,
                monthlyVolume: undefined,
                name: undefined,
                optIn: undefined,
                productionMessageContent: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("upsert (db43dbf7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brand: undefined,
            campaignId: undefined,
            monthlyVolume: undefined,
            name: undefined,
            optIn: undefined,
            productionMessageContent: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.upsert({
                brand: undefined,
                campaignId: undefined,
                monthlyVolume: undefined,
                name: undefined,
                optIn: undefined,
                productionMessageContent: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                key: "value",
            }),
        );
    });

    test("upsert (1cd9e681)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            brand: undefined,
            campaignId: undefined,
            monthlyVolume: undefined,
            name: undefined,
            optIn: undefined,
            productionMessageContent: undefined,
            useCase: undefined,
        };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.upsert({
                brand: undefined,
                campaignId: undefined,
                monthlyVolume: undefined,
                name: undefined,
                optIn: undefined,
                productionMessageContent: undefined,
                useCase: undefined,
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("validate (9cc92503)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            additionalInfo: "Please validate this DLC campaign for 10DLC compliance",
            campaignId: "dlc_1234567890",
        };
        const rawResponseBody = {
            errors: [{ description: "description", example: "example", field: "field" }],
            is_valid: true,
        };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.campaigns.tollFree.validate({
            additionalInfo: "Please validate this DLC campaign for 10DLC compliance",
            campaignId: "dlc_1234567890",
        });
        expect(response).toEqual({
            errors: [
                {
                    description: "description",
                    example: "example",
                    field: "field",
                },
            ],
            is_valid: true,
        });
    });

    test("validate (d11b3afa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: "campaignId" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.validate({
                additionalInfo: undefined,
                campaignId: "campaignId",
            });
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("validate (ac3701da)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: "campaignId" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.validate({
                additionalInfo: undefined,
                campaignId: "campaignId",
            });
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("validate (18773ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { additionalInfo: undefined, campaignId: "campaignId" };
        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .post("/campaigns/toll-free/validate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.campaigns.tollFree.validate({
                additionalInfo: undefined,
                campaignId: "campaignId",
            });
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });
});
