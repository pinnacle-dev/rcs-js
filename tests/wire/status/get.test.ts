/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { PinnacleClient } from "../../../src/Client";
import * as Pinnacle from "../../../src/api/index";

describe("Get", () => {
    test("brand (42e4fa52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { errors: ["errors"], id: 28, status: "PENDING" };
        server.mockEndpoint().get("/status/brand/28").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.status.get.brand(28);
        expect(response).toEqual({
            errors: ["errors"],
            id: 28,
            status: "PENDING",
        });
    });

    test("brand (fb12fbc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/status/brand/1").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.status.get.brand(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("brand (c926e4e4)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/status/brand/1").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.status.get.brand(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("brand (961e95c0)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/status/brand/1").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.status.get.brand(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("brand (e1aa1ad8)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/status/brand/1").respondWith().statusCode(500).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.status.get.brand(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("brand (b1a58e48)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server.mockEndpoint().get("/status/brand/1").respondWith().statusCode(501).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.status.get.brand(1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("toll free (eed2fc8c)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            error: "",
            id: 28,
            updates: { errors: ["errors"], number: "+14151234567", status: "IN_PROGRESS" },
        };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/28")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.status.get.tollFree(28);
        expect(response).toEqual({
            error: "",
            id: 28,
            updates: {
                errors: ["errors"],
                number: "+14151234567",
                status: "IN_PROGRESS",
            },
        });
    });

    test("toll free (eecd4f52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.tollFree(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("toll free (c9fc51d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.tollFree(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("toll free (84cc0bc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/1")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.tollFree(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("toll free (eba86205)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.tollFree(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("toll free (49e482b5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/toll-free-campaign/1")
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.tollFree(1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("dlc (4e253f41)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            error: "",
            id: 28,
            status: "IN REVIEW",
            updates: { number: "+14151234567", status: "PENDING_ASSIGNMENT", errors: ["errors"] },
        };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/28")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.status.get.dlc(28);
        expect(response).toEqual({
            error: "",
            id: 28,
            status: "IN REVIEW",
            updates: {
                number: "+14151234567",
                status: "PENDING_ASSIGNMENT",
                errors: ["errors"],
            },
        });
    });

    test("dlc (eecd4f52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.dlc(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("dlc (c9fc51d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.dlc(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("dlc (84cc0bc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/1")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.dlc(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("dlc (eba86205)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.dlc(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("dlc (49e482b5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/dlc-campaign/1")
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.dlc(1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("rcs (719b692d)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { errors: ["errors"], id: 28, status: "IN REVIEW" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/28")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.status.get.rcs(28);
        expect(response).toEqual({
            errors: ["errors"],
            id: 28,
            status: "IN REVIEW",
        });
    });

    test("rcs (eecd4f52)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/1")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.rcs(1);
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("rcs (c9fc51d9)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/1")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.rcs(1);
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("rcs (84cc0bc5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/1")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.rcs(1);
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("rcs (eba86205)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/1")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.rcs(1);
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("rcs (49e482b5)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/rcs-campaign/1")
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.rcs(1);
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });

    test("phone number (31f60b33)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { errors: ["errors"], phoneNumber: "+14151234567", status: "PENDING" };
        server
            .mockEndpoint()
            .get("/status/phone-number/%2B14151234567")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.status.get.phoneNumber("+14151234567");
        expect(response).toEqual({
            errors: ["errors"],
            phoneNumber: "+14151234567",
            status: "PENDING",
        });
    });

    test("phone number (388355c7)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/status/phone-number/phoneNumber")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.phoneNumber("phoneNumber");
        }).rejects.toThrow(
            new Pinnacle.BadRequestError({
                key: "value",
            }),
        );
    });

    test("phone number (80d5b10e)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/phone-number/phoneNumber")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.phoneNumber("phoneNumber");
        }).rejects.toThrow(
            new Pinnacle.UnauthorizedError({
                error: "error",
            }),
        );
    });

    test("phone number (b8b513aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/phone-number/phoneNumber")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.phoneNumber("phoneNumber");
        }).rejects.toThrow(
            new Pinnacle.NotFoundError({
                error: "error",
            }),
        );
    });

    test("phone number (a76757b2)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/phone-number/phoneNumber")
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.phoneNumber("phoneNumber");
        }).rejects.toThrow(
            new Pinnacle.InternalServerError({
                error: "error",
            }),
        );
    });

    test("phone number (27dfd32)", async () => {
        const server = mockServerPool.createServer();
        const client = new PinnacleClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { error: "error" };
        server
            .mockEndpoint()
            .get("/status/phone-number/phoneNumber")
            .respondWith()
            .statusCode(501)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.status.get.phoneNumber("phoneNumber");
        }).rejects.toThrow(
            new Pinnacle.NotImplementedError({
                error: "error",
            }),
        );
    });
});
